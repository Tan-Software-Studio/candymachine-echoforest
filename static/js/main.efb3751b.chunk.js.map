{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","components/TheImages.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["RootContainer","styled","theme","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","DoneContainer","marginBottom","fontWeight","ItemContainer","MintCountdown","date","status","style","onComplete","renderer","days","hours","minutes","seconds","completed","Paper","elevation","CTAButton","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","waitForActiveToken","setWaitForActiveToken","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","ACTIVE","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","CIVIC_GATEKEEPER_NETWORK","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","anchorWallet","useAnchorWallet","connect","connected","cluster","refreshCandyMachineState","useCallback","commitment","error","hideDuration","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","beforeTransactions","afterTransactions","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","Container","marginTop","maxWidth","position","className","textAlign","src","alt","border","Grid","container","direction","wrap","item","xs","Typography","formatNumber","asNumber","align","signTransaction","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","val","e","adapter","name","SolanaMobileWalletAdapterWalletName","preventDefault","href","target","rel","Snackbar","autoHideDuration","onClose","Alert","TheImages","createTheme","palette","process","REACT_APP_SOLANA_NETWORK","REACT_APP_SOLANA_RPC_HOST","REACT_APP_CANDY_MACHINE_ID","getCandyMachineId","clusterApiUrl","App","endpoint","useMemo","wallets","PhantomWalletAdapter","SolflareWalletAdapter","SlopeWalletAdapter","SolletWalletAdapter","SolletExtensionWalletAdapter","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","WalletDialogProvider","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","subId","Promise","resolve","reject","getSignatureStatuses","signatureStatuses","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","getProgramState","fetchIdl","idl","account","fetch","getCurrentBlockTime","getSlot","getBlockTime","all","currentBlockTime","timeDiff","id","authority","treasury","hiddenSettings","getFreezePdaState","freezePda","getMasterEdition","getMetadata","getCandyMachineCreator","getFreezePda","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","toString","freezePdaState","freezeAta","map","rm","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","blockhash","WalletNotConnectedError","unsignedTxns","getLatestBlockhash","i","Transaction","forEach","add","recentBlockhash","feePayer","partialSign","partiallySignedTransactions","filter","signatures","sig","equals","fullySignedTransactions","signAllTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","args","encoding","_rpcRequest","res","onSignature","context"],"mappings":"0dAKMA,EAAgBC,YAAO,MAAPA,EAAc,gBAAGC,EAAK,EAALA,MAAK,MAAQ,CAClDC,QAAS,OACTC,QAASF,EAAMG,QAAQ,GACvB,QAAS,CACPC,OAAQJ,EAAMG,QAAQ,IACtBE,MAAOL,EAAMG,QAAQ,GACrBG,OAAQN,EAAMG,QAAQ,GACtBF,QAAS,OACTM,cAAe,SACfC,aAAc,SACdC,WAAY,SACZC,eAAgB,SAChBC,WAAY,UACZC,MAAO,QACPC,aAAc,EACdC,SAAU,QAIRC,EAAgBhB,YAAO,OAAPA,EAAe,gBAAGC,EAAK,EAALA,MAAK,MAAQ,CACnDC,QAAS,OACTG,OAAQ,EACRY,aAAchB,EAAMG,QAAQ,IAC5BG,OAAQN,EAAMG,QAAQ,KACtBD,QAASF,EAAMG,QAAQ,GACvBI,cAAe,SACfC,aAAc,SACdC,WAAY,SACZC,eAAgB,SAChBC,WAAY,UACZC,MAAO,QACPC,aAAc,EACdI,WAAY,OACZH,SAAU,OAGNI,EAAgBnB,YAAO,OAAPA,CAAe,CACnCkB,WAAY,OACZH,SAAU,KAkBCK,EAA8C,SAAH,GAKjD,IAJLC,EAAI,EAAJA,KACAC,EAAM,EAANA,OACAC,EAAK,EAALA,MACAC,EAAU,EAAVA,WAoCA,OAAIH,EAEA,cAAC,IAAS,CACRA,KAAMA,EACNG,WAAYA,EACZC,SAvCkB,SAAH,GAMO,IAL1BC,EAAI,EAAJA,KACAC,EAAK,EAALA,MACAC,EAAO,EAAPA,QACAC,EAAO,EAAPA,QAIA,OADAF,GAAgB,GAAPD,EAFA,EAATI,UAISR,EAAS,cAACN,EAAa,UAAEM,IAA0B,KAGxD,eAACvB,EAAa,CAACwB,MAAOA,EAAM,UAC1B,eAACQ,EAAA,EAAK,CAACC,UAAW,EAAE,UAClB,cAACb,EAAa,UAAEQ,EAAQ,GAAE,WAAOA,GAAUA,IAC3C,+BAAM,WAER,eAACI,EAAA,EAAK,CAACC,UAAW,EAAE,UAClB,cAACb,EAAa,UACXS,EAAU,GAAE,WAAOA,GAAYA,IAElC,+BAAM,YAER,eAACG,EAAA,EAAK,CAACC,UAAW,EAAE,UAClB,cAACb,EAAa,UACXU,EAAU,GAAE,WAAOA,GAAYA,IAElC,+BAAM,kBAgBP,M,4CC/FEI,EAAYjC,kBAAOkC,IAAPlC,CAAc,kOAW1BmC,EAAa,SAAH,GAYhB,IAXLC,EAAM,EAANA,OACAC,EAAY,EAAZA,aACAC,EAAS,EAATA,UACAC,EAAY,EAAZA,aACAC,EAAQ,EAARA,SAQMC,EAASC,cACTC,EAAaC,cACnB,EAAgCC,oBAAS,GAAM,mBAAxCC,EAAQ,KAAEC,EAAW,KAC5B,EAA+CC,uBAAvCC,EAAmB,EAAnBA,oBAAqBC,EAAa,EAAbA,cAC7B,EAA8DL,oBAAU,GAAE,mBAAnEM,EAAuB,KAAEC,EAA0B,KAC1D,EAA8BP,oBAAS,GAAM,mBAAtCQ,EAAO,KAAEC,EAAU,KAC1B,EAAoDT,oBAAS,GAAM,mBAA5DU,EAAkB,KAAEC,EAAqB,KAiBhDC,qBAAU,WACR,IAAMC,EAAI,uCAAG,sBAAAC,EAAA,sEACLC,sCACJjB,EAAWA,WACXQ,GACA,KAAD,kBACKf,IAAS,KAAD,EAEdkB,GAAW,GACXP,GAAY,GAAO,2CACpB,kBATS,mCAUND,GAAYO,GACdK,MAED,CACDZ,EACAO,EACAV,EAAWA,WACXP,EACAe,IAGF,IAAMU,EA0FR,SAAwBC,GACtB,IAAMC,EAAMC,mBAIZ,OAHAP,qBAAU,WACRM,EAAIE,QAAUH,IACb,CAACA,IACGC,EAAIE,QA/FmBC,CAAYhB,GAwB1C,OAvBAO,qBAAU,WACR,IAAMU,EAAa,CACjBC,gBAAcC,cACdD,gBAAcE,wBAEVC,EAAe,UAAOJ,EAAW,CAACC,gBAAcI,UAEpDL,EAAWM,MAAK,SAACC,GAAK,OAAKb,IAA0Ba,OACpDH,EAAgBE,MAAK,SAACC,GAAK,OAAKxB,IAAkBwB,MAEnDnC,GAAa,GAEfoC,QAAQC,IAAI,WAAYR,gBAAclB,MACrC,CAACK,EAAoBM,EAAuBX,IAE/CO,qBAAU,WACJF,GAAsBL,IAAkBkB,gBAAcS,SACxDF,QAAQC,IAAI,8BACZpB,GAAsB,GACtBpB,OAED,CAACmB,EAAoBL,EAAed,IAGrC,cAACH,EAAS,CACR6C,SAAUxC,IAAcE,EACxBuC,QAAO,sBAAE,gCAAApB,EAAA,yDACS,OAAZtB,QAAY,IAAZA,MAAcqC,MAAMlC,UAAwB,OAAZH,QAAY,IAAZA,MAAcqC,MAAMM,WAAU,iBAEH,IADvDC,EACJ5C,EAAaqC,MAAMM,WAAWE,kBAAkBC,cAClCC,IAAwB,oBAClClC,IAAkBkB,gBAAcS,OAAM,gCAClCzC,IAAS,KAAD,yBAGc,OAA5BoB,GAAsB,GAAM,UACtBP,IAAsB,KAAD,GAC3B0B,QAAQC,IAAI,UAAW1B,GAAe,mCAG5B,gDAAZ+B,GACY,gDAAZA,EAAyD,iBAExC,OAAjB3B,GAAW,GAAM,UACU+B,2BACzB1C,EAAWA,WACXF,EAAO6C,UACPjD,EAAaqC,MAAMM,WAAWE,mBAC9B,KAAD,GAJiB,GAMF,QANVK,EAAY,cAMF,IAAZA,MAAcC,UAAS,kCACnBpD,IAAS,KAAD,2BAKZ,OAHFqD,OAAOC,KAAK,yCAAD,OACgCT,GACzC,UACA,UAGMU,6DACJlD,EAAO6C,UACPjD,EAAaqC,MAAMM,WAAWE,mBAC9B,KAAD,GAJGU,EAAmB,OAMzBxC,EACEyC,+BACElD,EAAWA,WACXiD,GACA,kBAAM7C,GAAY,KAClB,cAEF,gCAGc,MAAlBO,GAAW,GACL,IAAIwC,MAAM,+BAAD,OAAgCb,IAAW,KAAD,4CAGrD7C,IAAS,KAAD,GACdkB,GAAW,GAAO,4CAGtByC,QAAQ,YAAW,SAvHL,OAAZ1D,QAAY,IAAZA,KAAcqC,MAAMsB,UACf,WACE1D,EACF,cAAC2D,EAAA,EAAgB,IAEZ,OAAZ5D,QAAY,IAAZA,KAAcqC,MAAMwB,WACR,OAAZ7D,QAAY,IAAZA,KAAcqC,MAAMyB,gBAEb,iBAGF,U,sBCvBLC,EAAgBpG,kBAAOqG,IAAPrG,CAA0B,kNAU1CsG,EAAgBtG,UAAOuG,IAAG,0BAovB1BC,EAAmB,SACvBnE,GACsB,IAAD,EACrB,OACEA,EAAaqC,MAAMlC,UACW,QADH,EAC3BH,EAAaqC,MAAM+B,mBAAW,OAA9B,EAAgCC,eAAerF,KAExCsF,YAAOtE,EAAaqC,MAAM+B,YAAYG,QAGxCD,YACLtE,EAAaqC,MAAMmC,WACfxE,EAAaqC,MAAMmC,WACnBxE,EAAaqC,MAAMwB,UACnB,IAAIY,KAAU,IAAIC,MAAOC,UAAY,UACrCC,IAIOC,EA5vBF,SAACC,GAAsB,IAAD,MACjC,EAA0CtE,oBAAS,GAAM,mBAAlDuE,EAAa,KAAEC,EAAgB,KACtC,EAAwCxE,qBAA+B,mBAAhER,EAAY,KAAEiF,EAAe,KACpC,EAAoCzE,mBAAqB,CACvD6C,MAAM,EACN6B,QAAS,GACTC,cAAUP,IACV,mBAJKQ,EAAU,KAAEC,EAAa,KAKhC,EAAgC7E,oBAAS,GAAM,mBAAxCL,EAAQ,KAAEmF,EAAW,KAC5B,EAA8B9E,qBAAgB,mBAAvC+E,EAAO,KAAEC,EAAU,KAC1B,EAA4ChF,qBAAkB,mBAAvDiF,EAAc,KAAEC,EAAiB,KACxC,EAA8ClF,oBAAS,GAAM,oBAAtDmF,GAAe,MAAEC,GAAkB,MAC1C,GAAkCpF,oBAAS,GAAM,qBAA1CqD,GAAS,MAAEgC,GAAY,MAC9B,GAA4CrF,oBAAS,GAAM,qBAApDsF,GAAc,MAAEC,GAAiB,MACxC,GAA0CvF,qBAAqB,qBAAxDwF,GAAa,MAAEC,GAAgB,MACtC,GAAwCzF,oBAAS,GAAK,qBAA/C0F,GAAY,MAAEC,GAAe,MACpC,GAAgC3F,qBAAsB,qBAA/C4F,GAAQ,MAAEC,GAAW,MAEtBC,GAASxB,EAAMyB,QACfC,GAAeC,cACrB,GAAkDpG,cAA1CqG,GAAO,GAAPA,QAASC,GAAS,GAATA,UAAW1D,GAAS,GAATA,UAAW7C,GAAM,GAANA,OACjCwG,GAAU9B,EAAMlC,QAEhBiE,GAA2BC,sBAAW,sBAC1C,4FAAAxF,EAAA,sDAA2C,GAApCyF,EAAsB,+BAAG,YACzB9D,GAAU,CAAD,wDAGM2B,IAAhBE,EAAMkC,MAAmB,gBAMxB,OALH3B,EAAc,CACZhC,MAAM,EACN6B,QAASJ,EAAMkC,MACf7B,SAAU,QACV8B,aAAc,OACb,0BAIwD,GAAvD3G,EAAa,IAAI4G,aAAWpC,EAAMyB,QAASQ,IAE7CjC,EAAMqC,eAAe,CAAD,0CAEDC,YACjBZ,GACA1B,EAAMqC,eACN7G,GACA,KAAD,GAWD,GAfM+G,EAAI,OAKV/E,QAAQC,IAAI,wBAAyB8E,GACjCC,IAAa,OAAJD,QAAI,IAAJA,MAAMhF,MAAMmC,cACjB,OAAJ6C,QAAI,IAAJA,OAAI,EAAJA,EAAMhF,MAAMmC,WAAW+C,aAAa,IAAI7C,MAAOC,UAAY,IAE3D6C,GAAU,EAGVC,GAAW,EACXC,EAAYL,EAAKhF,MAAMsF,MAGnB,OAAJN,QAAI,IAAJA,MAAMhF,MAAMuF,sBAAqB,iBAwBlC,OArBCP,EAAKhF,MAAMuF,sBAAsBJ,WAC/BH,EAAKhF,MAAMmC,YACX6C,EAAKhF,MAAMmC,WAAW+C,YAAa,IAAI7C,MAAOC,UAAY,OAE5D6C,GAAU,GAGRH,EAAKhF,MAAMuF,sBAAsB5B,eACnCC,GAAiBoB,EAAKhF,MAAMuF,sBAAsB5B,eAClD0B,EAAYL,EAAKhF,MAAMuF,sBAAsB5B,gBAE7CC,QAAiBrB,GAGZyC,EAAKhF,MAAMuF,sBAAsBJ,UACpCH,EAAKhF,MAAMyB,iBAAkB,IAI3BzC,EAAO,IAAIoD,IAAYoD,UAC3BR,EAAKhF,MAAMuF,sBAAsBvG,MACjC,EAAD,QACoByG,YAAczG,EAAM4B,IAAU,QAAG,OAAhD8E,EAAK,OAA0C,GAAG,EAAF,kBAG9BzH,EAAW0H,uBAAuBD,GAAO,KAAD,GAAxDE,EAAO,OACbR,EAAWS,SAASD,EAAQxG,MAAM0G,QAAU,EAE5CvC,GAAmB6B,GAEfJ,EAAKhF,MAAMyB,kBACbwD,EAASG,IAAaD,GAAWF,IAClC,mDAED1B,IAAmB,GAEfyB,EAAKhF,MAAMyB,kBACbwD,GAAS,GAEXhF,QAAQC,IACN,wDAEFD,QAAQC,IAAI,EAAD,IAAI,QAGiC,GAApDmF,EAAYD,EAAWC,EAAYL,EAAKhF,MAAMsF,MAEtC,OAAJN,QAAI,IAAJA,MAAMhF,MAAM+F,UAAS,iBAEqC,OAAtD/G,EAAO,IAAIoD,IAAYoD,UAAUR,EAAKhF,MAAM+F,WAAW,EAAD,QACvCN,YAAczG,EAAM4B,IAAU,QAAG,OAAhD8E,EAAK,OAA0C,GAAG,EAAF,kBAE9BzH,EAAW0H,uBAAuBD,GAAO,KAAD,GAAxDE,EAAO,OAEPI,EAAQ,IAAI5D,IAAUwD,EAAQxG,MAAM0G,QAAQG,IAAIZ,GAGtD3B,GAAkBsC,GAClBf,EAASA,GAAUe,EAAM,mDAEzBtC,IAAkB,GAClBuB,GAAS,EAEThF,QAAQC,IAAI,kDACZD,QAAQC,IAAI,EAAD,IAAI,gCAGY,OAHZ,KAGGkC,IAAS,UACrBnE,EAAWiI,WAAWtF,IAAU,oBADlCgF,EAAO,eAGPI,EAAQJ,EAAQK,IAAIZ,GAC1B3B,GAAkBsC,GAClBf,EAASA,GAAUe,EAAM,QA+B1B,OA3BO,OAAJhB,QAAI,IAAJA,GAAuB,QAAnB,EAAJA,EAAMhF,MAAM+B,mBAAW,OAAvB,EAAyBC,eAAerF,OAC1CwG,EAAWlB,YAAO+C,EAAKhF,MAAM+B,YAAYG,SAEvC8C,EAAKhF,MAAM+B,YAAYG,OAAOgD,YAC9B,IAAI7C,MAAOC,UAAY,MAEvB2C,GAAS,IAIL,OAAJD,QAAI,IAAJA,GAAuB,QAAnB,EAAJA,EAAMhF,MAAM+B,mBAAW,OAAvB,EAAyBC,eAAe8D,QACpCK,EAAQC,KAAKC,IACjBrB,EAAKhF,MAAM+B,YAAYG,OAAOgD,WAC9BF,EAAKhF,MAAMsG,gBAETtB,EAAKhF,MAAMuG,cAAgBJ,EAC7B9C,EAAkB8C,EAAQnB,EAAKhF,MAAMuG,gBAErClD,EAAkB,GAClB2B,EAAKhF,MAAMsB,WAAY,IAGzB+B,EAAkB2B,EAAKhF,MAAMoD,gBAG3B4B,EAAKhF,MAAMsB,YACb2D,GAAS,GACV,UAE6BuB,YAAiB/D,EAAMqC,gBAAgB,KAAD,GAAhD,OAAgD,4BAA7D2B,EAAa,eACexI,EAAWyI,eAC5CD,GACA,KAAD,GAFKE,EAAoB,OAI1B1D,EAAa+B,EAAKhF,MAAMlC,SAAWmH,GACnCzB,GAAcwB,EAAKhF,MAAMwB,UAAY2D,GACrCvC,EAAgBoC,GAEV4B,EACJ,KACGD,GAAwB3B,EAAKhF,MAAM6G,gBAAkB,IAAM,IAC7D7B,EAAKhF,MAAM+F,UAAY,GAAK,IAC5Bf,EAAKhF,MAAMuF,sBAAwB,GAAK,IACR,QAAhC,EAAAP,EAAKhF,MAAMuF,6BAAqB,OAAM,QAAN,EAAhC,EAAkCuB,YAAI,OAAtC,EAAwCC,cAAgB,GAAK,IAC7D/B,EAAKhF,MAAMM,WAAa,GAAK,IACR,QAArB,EAAA0E,EAAKhF,MAAMM,kBAAU,OAArB,EAAuB0G,YAAc,GAAK,GAE7ClD,GAAgB8C,EAAc,MAAM,kDAEhC,gBAAaxF,MAEb,KAAEyB,UAAO,iCAA+BJ,EAAMqC,gBAE9C9B,EAAc,CACZhC,MAAM,EACN6B,QAAQ,uEAAD,OAAyEJ,EAAMqC,eAAc,wBAAgBrC,EAAMyB,QAAO,sHACjIpB,SAAU,QACV8B,aAAc,OAGhB,KAAE/B,QAAQoE,WAAW,qCAErBjE,EAAc,CACZhC,MAAM,EACN6B,QAAQ,gDAAD,OAAkDJ,EAAMyB,QAAO,0IACtEpB,SAAU,QACV8B,aAAc,OAIlB5B,EAAc,CACZhC,MAAM,EACN6B,QAAQ,GAAD,aACPC,SAAU,QACV8B,aAAc,OAGlB3E,QAAQC,IAAI,EAAD,IAAI,gCAGjB8C,EAAc,CACZhC,MAAM,EACN6B,QAAQ,iIACRC,SAAU,QACV8B,aAAc,OACb,0EAGP,CAACT,GAAc1B,EAAMqC,eAAgBrC,EAAMkC,MAAOlC,EAAMyB,UAGpDxG,GAAM,uCAAG,0DAAAuB,EAAA,sDAKY,GAJzBiI,EAAiC,+BAAG,GACpCC,EAAgC,+BAAG,GAAE,SAGnCxE,GAAiB,KACb2B,IAAyB,OAAZ3G,QAAY,IAAZA,KAAcyJ,SAAWxG,IAAS,qBAE7CiD,SAA6BtB,IAAbwB,GAAsB,iBAKrC,OAJHf,EAAc,CACZhC,MAAM,EACN6B,QAAS,wCACTC,SAAU,SACT,SACeuE,YAAsB1J,EAAciD,IAAW,KAAD,EAChC,GADhC0G,EAAS,OACL1K,EAAc,CAAE2K,KAAK,IACrBD,EAAUE,YAAY,CAAD,iCACRC,YACbH,EAAUE,YACV/E,EAAMiF,UACNjF,EAAMxE,YACN,GACA,KAAD,GALDrB,EAAM,mBAOJA,GAAWA,EAAO2K,IAAG,iBACvBvD,GAAYsD,GACZtE,EAAc,CACZhC,MAAM,EACN6B,QACE,+DACFC,SAAU,SACT,wBAOqB,OALxBE,EAAc,CACZhC,MAAM,EACN6B,QAAS,iCACTC,SAAU,UAEZH,GAAiB,GAAO,mDAI1BK,EAAc,CACZhC,MAAM,EACN6B,QAAS,kCACTC,SAAU,SACT,yBAGoB6E,YACvBhK,EACAiD,GACAsG,EACAC,EACS,QADQ,EACjBG,SAAS,QAAIvD,IACb,KAAD,GAGyB,GATpB6D,EAAU,OAQZhL,EAAc,CAAE2K,KAAK,GACrBM,EAAiB,MACjBD,EAAW,CAAD,iCACGH,YACbG,EAAWE,SACXrF,EAAMiF,UACNjF,EAAMxE,YACN,GACA,KAAD,GALK,OAANrB,EAAM,iBAQEe,EAAayJ,QAAQW,SAAS9J,WAAWyI,eAC7CkB,EAAWI,YACX,aACA,KAAD,GAJHH,EAAc,OAKd5H,QAAQC,IAAI,sBAAuB2H,GAAgB,QAGjDjL,IAAWA,EAAO2K,KAAOM,GAI3BxE,EADM4E,EAAY7E,EAAkB,GAEpCH,EAAatF,EAAaqC,MAAMlC,SAAWmK,EAAY,GACvDtK,EAAaqC,MAAMsB,UAA0B,IAAd2G,EAC/BjE,QAAYzB,GACZS,EAAc,CACZhC,MAAM,EACN6B,QAAS,mCACTC,SAAU,UACV8B,aAAc,MAEhBJ,GAAyB,cAChB5H,IAAWA,EAAO2K,KAC3BvE,EAAc,CACZhC,MAAM,EACN6B,QACE,kLACFC,SAAU,QACV8B,aAAc,MAEhBJ,OAEAxB,EAAc,CACZhC,MAAM,EACN6B,QAAS,iCACTC,SAAU,UAEZ0B,MACD,0DAGC3B,EAAU,KAAMqF,KAAO,oCACtB,KAAMA,IAUU,MAAf,KAAMC,MACRlI,QAAQC,IAAI,EAAD,IACX2C,EAAO,YACP9B,OAAOqH,SAASC,UACQ,MAAf,KAAMF,OACftF,EAAO,sCAdJ,KAAMA,QAEA,KAAMA,QAAQyF,QAAQ,UAC/BrI,QAAQC,IAAI,EAAD,IACX2C,EAAO,aACE,KAAMA,QAAQyF,QAAQ,WAC/BzF,EAAO,wDALPA,EAAU,yCAiBdG,EAAc,CACZhC,MAAM,EACN6B,UACAC,SAAU,UAIZ0B,KAA2B,QAEH,OAFG,UAE3B7B,GAAiB,GAAO,6EAE3B,kBA5IW,mCA8IN4F,GAAmB,WACvB,IAAItD,GAAUnH,GAAY0D,GAEtByD,IACEtH,EAAcqC,MAAMyB,kBAAoB6B,KAC1C2B,GAAS,GAEP/B,GAAWb,KAAKmG,OAAStF,EAAQZ,YACnC2C,GAAS,IAKXzD,IACA7D,EAAcqC,MAAMmC,YACpBxE,EAAcqC,MAAMmC,WAAW+C,aAAc,IAAI7C,MAAOC,UAAY,KAEpEkB,GAAc7F,EAAcqC,MAAMwB,WAAY,GAGhDyB,EAAatF,EAAcqC,MAAMlC,SAAWmH,IAqB9C,OAlBAlG,qBAAU,WACRyF,OACC,CACDL,GACA1B,EAAMqC,eACNrC,EAAMxE,WACNuG,KAGFzF,qBAAU,YACR,SAAU0J,IACRC,YAAW,WACTlE,KACAiE,MACC,KAJL,KAMC,CAACjE,KAGF,eAACmE,EAAA,EAAS,CAAC9L,MAAO,CAAE+L,UAAW,KAAM,UACnC,cAACD,EAAA,EAAS,CAACE,SAAS,KAAKhM,MAAO,CAAEiM,SAAU,YAAa,SAEvD,cAACzL,EAAA,EAAK,CACJ0L,UAAU,yBAQV,SAUA,qBACElM,MAAO,CACLmM,UAAW,UACX,SAEF,qBAAKD,UAAU,oBAAmB,SAChC,qBACEA,UAAU,oEACVlM,MAAO,CACLrB,QAAS,OACTS,eAAgB,UAChB,SAEF,sBAAK8M,UAAU,0EAAyE,UACtF,qBAAKA,UAAU,gCAA+B,SAC5C,qBACEE,IAAI,eACJC,IAAI,GACJH,UAAU,+DAId,oBAAIA,UAAU,+CAA8C,SAAC,gCAG7D,4BACE,8BAAG,2BACuB,8BAAK,OAAQ,qGAWzC,qBACEA,UAAU,sBACVlM,MAAO,CACLrB,QAAS,OACTS,eAAgB,UAChB,SAEF,qBACE8M,UAAU,0EACVlM,MAAO,CACLpB,QAAS,UACT0N,OAAQ,kBACR/M,aAAc,MACdC,SAAU,OACVE,aAAc,QACd,SAGF,4BAAG,2BAIP,qBAAKwM,UAAU,WAAU,SACvB,6BAAI,yBAOJzE,GAiBA,mCACE,sBAAKyE,UAAU,cAAa,UACzBpL,GACC,eAACyL,EAAA,EAAI,CACHC,WAAS,EACTC,UAAU,MACVrN,eAAe,SACfsN,KAAK,SAAQ,UAEb,eAACH,EAAA,EAAI,CACHI,MAAI,EACJC,GAAI,EACJ5M,MAAO,CACLV,MAAO,SACP,UAEF,cAACuN,EAAA,EAAU,CACTrI,QAAQ,QACRlF,MAAM,gBACNU,MAAO,CACLV,MAAO,SACP,SACH,cAGD,cAACuN,EAAA,EAAU,CACTrI,QAAQ,KACRlF,MAAM,cACNU,MAAO,CACLL,WAAY,OACZL,MAAO,SACP,mBAEEiH,QAGR,eAACgG,EAAA,EAAI,CAACI,MAAI,EAACC,GAAI,EAAE,UACf,cAACC,EAAA,EAAU,CACTrI,QAAQ,QACRlF,MAAM,gBACNU,MAAO,CACLV,MAAO,SACP,SAEDmH,IAAmBK,GAChB,iBACA,UAEN,cAAC+F,EAAA,EAAU,CACTrI,QAAQ,KACRlF,MAAM,cACNU,MAAO,CAAEL,WAAY,OAAQL,MAAO,SAAU,SAEb,iBAAhCmH,IAAmBK,GACXgG,IAAaC,SAASjG,IACtBgG,IAAaC,SAChBjM,EAAaqC,MAAMsF,aAI7B,cAAC8D,EAAA,EAAI,CAACI,MAAI,EAACC,GAAI,EAAE,SACd3L,GACDoF,GACAb,KAAKmG,MAAQtF,EAAQZ,UACnB,qCACE,cAAC,EAAa,CAEZ3F,KAAMmF,EAAiBnE,GACvBd,MAAO,CAAEZ,eAAgB,YACzBW,OAAO,YACPE,WAAYyL,IAJR,eAMN,cAACmB,EAAA,EAAU,CACTrI,QAAQ,UACRwI,MAAM,SACNrO,QAAQ,QACRqB,MAAO,CAAEL,WAAY,QAAS,SAC/B,sBAKH,qCACE,cAAC,EAAa,CAEZG,KAAMmF,EAAiBnE,GACvBd,MAAO,CAAEZ,eAAgB,YACzBW,OACc,OAAZe,QAAY,IAAZA,GAAmB,QAAP,EAAZA,EAAcqC,aAAK,OAAnB,EAAqBsB,WACpB4B,GACCb,KAAKmG,MAAQtF,EAAQZ,UACnB,YACAd,GACA,UACA,WAEN1E,WAAYyL,IAZR,UAcL/G,IACC7D,EAAaqC,MAAMmC,YACnBxE,EAAaqC,MAAMmC,WAAW+C,YAC5B,IAAI7C,MAAOC,UAAY,KACvB,cAACoH,EAAA,EAAU,CACTrI,QAAQ,UACRwI,MAAM,SACNrO,QAAQ,QACRqB,MAAO,CAAEL,WAAY,QAAS,SAC/B,8BASf,8BACE,cAACoF,EAAa,UACC,OAAZjE,QAAY,IAAZA,KAAcqC,MAAMlC,UACT,OAAZH,QAAY,IAAZA,KAAcqC,MAAMM,YACpBM,IACY,OAAZuD,SAAY,IAAZA,OAAc2F,gBACZ,cAAC,kBAAe,CACd/L,OAAQ,CACN6C,UACEA,IACA,IAAI4E,YAAUuE,KAChBD,gBAAiB3F,GAAa2F,iBAEhCtJ,kBACc,OAAZ7C,QAAY,IAAZA,GAAmB,QAAP,EAAZA,EAAcqC,aAAK,OAAY,QAAZ,EAAnB,EAAqBM,kBAAU,WAAnB,EAAZ,EACIE,kBAENwJ,WAAY/F,GACZM,QAASA,GACT0F,QAAS,CAAEC,eAAe,GAAQ,SAElC,cAAC,EAAU,CACTvM,aAAcA,EACdC,UAAW8E,EACX7E,aAAc,SAACsM,GAAG,OAAKxH,EAAiBwH,IACxCzM,OAAQA,GACRI,SACEA,GACC0D,IACC8B,IACAG,OAKR,cAAC,EAAU,CACT9F,aAAcA,EACdC,UAAW8E,EACX7E,aAAc,SAACsM,GAAG,OAAKxH,EAAiBwH,IACxCzM,OAAQA,GACRI,SACEA,GACC0D,IACC8B,IACAG,cAhLhB,qBAAKsF,UAAU,cAAa,SAC1B,cAACrH,EAAa,CACZrB,QAAS,SAAC+J,IAEA,OAANrM,SAAM,IAANA,QAAM,EAANA,GAAQsM,QAAQC,QAChBC,MAEAlG,KACA+F,EAAEI,mBAEJ,SACH,qBA+KL,sBAAKzB,UAAU,OAAM,UACnB,uBAAM,+EACkB,uBAAM,iJAEwB,uBAAM,kEAG5D,uBACA,iCAAQ,4BAGV,sBACEA,UAAU,mCACVlM,MAAO,CACLL,WAAY,OACZL,MAAO,QACP6M,UAAW,UACX,UAEF,oBAAID,UAAU,OAAM,SAAC,oCACrB,mBACE0B,KAAK,gEACLC,OAAO,SACPC,IAAI,sBAAqB,SAEzB,qBAAK5B,UAAU,oCAAmC,SAAC,oFAanE,cAAC6B,EAAA,EAAQ,CACP5J,KAAM+B,EAAW/B,KACjB6J,sBAC8BtI,IAA5BQ,EAAW6B,aAA6B,IAAO7B,EAAW6B,aAE5DkG,QAAS,kBAAM9H,EAAc,2BAAKD,GAAU,IAAE/B,MAAM,MAAS,SAE7D,cAAC+J,EAAA,EAAK,CACJD,QAAS,kBAAM9H,EAAc,2BAAKD,GAAU,IAAE/B,MAAM,MACpD8B,SAAUC,EAAWD,SAAS,SAE7BC,EAAWF,gB,iGCzxBhB8F,GAAYrN,kBAAO,MAAPA,CAAa,mMAwEhB0P,GAxBG,WAChB,OACE,cAAC,GAAS,UAgBR,8BAAK,eC5CLzP,GAAQ0P,aAAY,CACxBC,QAAS,CACPpE,KAAM,UAaNnC,QAA4BpC,OAEaA,IAAzC4I,mIAAYC,yBACdzG,GACE,yHACiDpC,IAA1C4I,mIAAYE,4BACrB1G,GACE,wKAGJ,IAAMG,GAnBoB,WACxB,IACE,OAAO,IAAI1C,IAAYoD,UAAU2F,mIAAYG,4BAC7C,MAAOlB,GAEP,YADAnK,QAAQC,IAAI,qCAAsCkK,IAe/BmB,GACjBhL,GAA+C,QAAxC,EAAI4K,mIAAYC,gCAAwB,QACnD,SACIlH,GACiC,QAD1B,EACXiH,mIAAYE,iCAAyB,QAAIjJ,IAAYoJ,cAAc,UAC/DvN,GAAa,IAAImE,IAAYyC,WAAWX,IA2C/BuH,GAzCH,WACV,IAAMC,EAAWC,mBAAQ,kBAAMH,wBAAcjL,MAAU,IAEjDqL,EAAUD,mBACd,iBAAM,CACJ,IAAIE,KACJ,IAAIC,KAAsB,CAAEvL,aAC5B,IAAIwL,KACJ,IAAIC,KAAoB,CAAEzL,aAC1B,IAAI0L,KAA6B,CAAE1L,gBAErC,IAGF,OACE,mCACE,cAAC2L,GAAA,EAAa,CAAC3Q,MAAOA,GAAM,SAC1B,cAAC4Q,EAAA,EAAkB,CAACT,SAAUA,EAAS,SACrC,cAACU,GAAA,EAAc,CAACR,QAASA,EAASS,aAAW,WAC3C,eAACC,GAAA,EAAoB,WACnB,cAAC,EAAI,CACHxH,eAAgBA,GAChB7G,WAAYA,GACZyJ,UAAW6E,IACXrI,QAASA,GACT3D,QAASA,GACToE,MAAOA,KAET,cAAC,GAAS,gBCtET6H,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,GAAG,MAENC,SAASC,eAAe,SAM1Bb,M,+WCDavK,EAAS,SAAC7C,GACrB,GAAKA,EAIL,OAAO,IAAIiD,KAAwB,IAAnBjD,EAAM8F,aAGlBoI,EAAiB,IAAIC,KAAKC,aAAa,QAAS,CACpD3Q,MAAO,UACP4Q,sBAAuB,EACvBC,sBAAuB,IAGZ/D,EAAe,CAC1BgE,OAAQ,SAACxD,GACP,OAAKA,EAIEmD,EAAeK,OAAOxD,GAHpB,MAKXP,SAAU,SAACO,GACT,GAAKA,EAIL,OAAOA,EAAIjF,WAAa0I,qBAIfC,EACX,IAAIzL,IAAYoD,UAAU,gDAEfsI,EAAQ,IAAI1L,IAAYoD,UACnC,+CAGW9E,EACX,8CAEW+E,EAAa,uCAAG,WAC3BzG,EACA+O,GAA4B,iFAEf3L,IAAYoD,UAAUwI,mBACjC,CAACD,EAAME,WAAYC,IAAiBD,WAAYjP,EAAKiP,YACrDJ,GACA,KAAD,8EACF,gBARyB,wCAUbM,EAAgB,uCAAG,WAC9B3N,GAAwC,iFAE3B4B,IAAYoD,UAAUwI,mBACjC,CAACxN,EAAkByN,WAAYG,EAAOC,KAAK,WAC3CP,GACA,KAAD,8EACF,gBAP4B,sCAShBQ,EAAe,uCAAG,WAC7BvQ,EACAyC,GAAwC,iFAE3B4B,IAAYoD,UAAUwI,mBACjC,CACEjQ,EAAOkQ,WACPG,EAAOC,KAAK,WACZD,EAAOC,KAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAClC7N,EAAkByN,YAEpBH,GACA,KAAD,8EACF,gBAb2B,0C,2VCzDf/D,EAAwB,IAAI3H,IAAYoD,UACnD,+CAGI+I,EAA4B,IAAInM,IAAYoD,UAChD,+CA4CWiC,EAAqC,uCAAG,WACnD+G,EACAC,EACAxQ,GAAkC,yFASnB,OARfyQ,EAAW,gCAEPC,GAAO,EACP/R,EAAoD,CACtDgS,KAAM,EACNC,cAAe,EACftH,IAAK,MAEDuH,EAAQ,EAAE,EAAD,OACA,IAAIC,QAAO,uCAAC,WAAOC,EAASC,GAAM,iEAC/CvG,YAAW,WACLiG,IAGJA,GAAO,EACP1O,QAAQC,IAAI,4BACZ+O,EAAO,CAAER,SAAS,OACjBA,GAAS,UAEJE,IAAQD,EAAW,gBA4BpB,OA1BL,sBAAC,4BAAAzP,EAAA,+EAEmChB,EAAWiR,qBAAqB,CAC9DV,IACC,KAAD,EAFIW,EAAiB,OAGvBvS,EAASuS,GAAqBA,EAAkB/P,MAAM,GACjDuP,IACE/R,EAEMA,EAAO2K,KAChBtH,QAAQC,IAAI,iBAAkBsO,EAAM5R,GACpC+R,GAAO,EACPM,EAAOrS,EAAO2K,MACJ3K,EAAOiS,eAGjB5O,QAAQC,IAAI,wBAAyBsO,EAAM5R,GAC3C+R,GAAO,EACPK,EAAQpS,IAJRqD,QAAQC,IAAI,4BAA6BsO,EAAM5R,GAN/CqD,QAAQC,IAAI,uBAAwBsO,EAAM5R,IAY7C,gDAEI+R,GACH1O,QAAQC,IAAI,8BAA+BsO,EAAK,EAAD,IAChD,wDAxBL,GA0BK,SACCY,EAAM,KAAM,KAAD,4DAEpB,qDAzCyB,IAyCvB,KAAD,EAzCI,OAANxS,EAAM,0BA6CEqB,EAAWoR,wBAAwBP,GAAO,KAAD,6DAKT,OADxCH,GAAO,EACP1O,QAAQC,IAAI,mBAAoBtD,GAAQ,kBACjCA,GAAM,0DACd,gBAjEiD,0CAmE5C0S,EAA0C,SAC9CC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAO,CACX,CAAEC,OAAQJ,EAAOK,UAAU,EAAMC,YAAY,GAC7C,CAAEF,OAAQL,EAAwBM,UAAU,EAAOC,YAAY,GAC/D,CAAEF,OAAQH,EAAeI,UAAU,EAAOC,YAAY,GACtD,CAAEF,OAAQF,EAAqBG,UAAU,EAAOC,YAAY,GAC5D,CACEF,OAAQxN,IAAY2N,cAAcC,UAClCH,UAAU,EACVC,YAAY,GAEd,CAAEF,OAAQ1B,IAAkB2B,UAAU,EAAOC,YAAY,GACzD,CACEF,OAAQxN,IAAY6N,mBACpBJ,UAAU,EACVC,YAAY,IAGhB,OAAO,IAAI1N,IAAY8N,uBAAuB,CAC5CP,OACAK,UAAWnC,IACXsC,KAAM/B,EAAOC,KAAK,OAITtJ,EAAoB,uCAAG,WAClCZ,EACAW,EACA7G,GAAkC,+FAaT,OAXnB8J,EAAW,IAAI3F,IAAgBnE,EAAYkG,EAAc,CAC7DiM,oBAAqB,cAGjBC,EAAe,uCAAG,gCAAApR,EAAA,sEACJmD,IAAekO,SAASvG,EAAuBhC,GAAU,KAAD,EACD,OADnEwI,EAAG,OACHnJ,EAAU,IAAIhF,IAAemO,EAAMxG,EAAuBhC,GAAU,EAAD,OAChDX,EAAQoJ,QAAQ7S,aAAa8S,MAAM3L,GAAgB,KAAD,EAA3D,OAAV9E,EAAU,yBACT,CAACoH,EAASpH,IAAM,2CACxB,kBALoB,mCAOf0Q,EAAmB,uCAAG,8BAAAzR,EAAA,sEACPhB,EAAW0S,UAAU,KAAD,EAA7B,OAAJ/B,EAAI,gBACI3Q,EAAW2S,aAAahC,GAAK,qJAAK,IAAIvM,MAAOC,UAAY,IAAK,KAAD,8EAC5E,kBAHwB,4CAK0ByM,QAAQ8B,IAAI,CAC7DR,IACAK,MACC,KAAD,EAOyE,OAPzE,kDAHMtJ,EAAO,KAAEpH,EAAK,KAAG8Q,EAAgB,KAInCxK,EAAiBtG,EAAMmQ,KAAK7J,eAAepB,WAC3CqB,EAAgBvG,EAAMuG,cAAcrB,WAEpC9B,EAAiBkD,EAAiBC,EAClCwK,GAAW,IAAI1O,MAAOC,UAAY,IAAOwO,EAEnB,OAA1B9Q,EAAMmQ,KAAKhO,WAAsBnC,EAAMmQ,KAAKhO,WAAa4O,EAAW,KAAI,kBAEnE,CACLC,GAAIlM,EACJsC,UACApH,MAAO,CACLiR,UAAWjR,EAAMiR,UACjB3K,iBACAC,gBACAnD,iBACA9B,UAA8B,IAAnB8B,EACXtF,UAAU,EACV0D,WAAW,EACXC,iBAAiB,EACjBU,WAAYnC,EAAMmQ,KAAKhO,WACvB+O,SAAUlR,EAAMjC,OAChBgI,UAAW/F,EAAM+F,UACjBzF,WAAYN,EAAMmQ,KAAK7P,WACvByB,YAAa/B,EAAMmQ,KAAKpO,YACxBwD,sBAAuBvF,EAAMmQ,KAAK5K,sBAClC4L,eAAgBnR,EAAMmQ,KAAKgB,eAC3B7L,MAAOtF,EAAMmQ,KAAK7K,MAClBuB,gBAAiB7G,EAAMmQ,KAAKtJ,mBAE/B,4CACF,gBAxDgC,0CA0DpBuK,EAAiB,uCAAG,WAC/BhK,EACAiK,GAAgC,gGAGLjK,EAAQoJ,QAAQa,UAAUZ,MAAMY,GAAW,KAAD,EAAnD,OAAVrR,EAAU,yBACTA,GAAK,yDAEL,MAAI,yDAEd,gBAV6B,wCAYxBsR,EAAgB,uCAAG,WACvBtS,GAA2B,iFAGnBoD,IAAYoD,UAAUwI,mBAC1B,CACEI,EAAOC,KAAK,YACZE,EAA0BN,WAC1BjP,EAAKiP,WACLG,EAAOC,KAAK,YAEdE,GACD,uCACD,IAAC,2CACJ,gBAdqB,sCAgBhBgD,EAAW,uCAAG,WAClBvS,GAA2B,iFAGnBoD,IAAYoD,UAAUwI,mBAC1B,CACEI,EAAOC,KAAK,YACZE,EAA0BN,WAC1BjP,EAAKiP,YAEPM,GACD,uCACD,IAAC,2CACJ,gBAbgB,sCAeJiD,EAAsB,uCAAG,WACpC7T,GAAmC,iFAEtByE,IAAYoD,UAAUwI,mBACjC,CAACI,EAAOC,KAAK,iBAAkB1Q,EAAasQ,YAC5ClE,GACA,KAAD,8EACF,gBAPkC,sCAStB0H,EAAY,uCAAG,WAC1B9T,GAAmC,iFAEtByE,IAAYoD,UAAUwI,mBACjC,CAACI,EAAOC,KAAK,UAAW1Q,EAAasQ,YACrClE,GACA,KAAD,8EACF,gBAPwB,sCASZvD,EAAgB,uCAAG,WAC9BkL,GAA0C,iFAE7BtP,IAAYoD,UAAUwI,mBACjC,CAACI,EAAOC,KAAK,cAAeqD,EAAoBzD,YAChDlE,GACA,KAAD,8EACF,gBAP4B,sCAchB4H,EAA+B,uCAAG,WAC7C3S,EACA4S,GAAmC,iFAG3BxP,IAAYoD,UAAUwI,mBAC1B,CACEI,EAAOC,KAAK,YACZE,EAA0BN,WAC1BjP,EAAKiP,WACLG,EAAOC,KAAK,wBACZuD,EAAa3D,YAEfM,GACD,uCACD,IAAC,2CACJ,gBAhB2C,wCAwB/BlH,EAAqB,uCAAG,WACnC1J,EACA6R,GAA4B,6EAEe,OAArCxQ,EAAOoD,IAAYyP,QAAQC,WAAW,EAAD,OAEnCrM,YAAczG,EAAK4B,UAAW4O,GAAM,OAQlB,OATpBuC,EAAuB,OAE3B,GAEIC,EAAiC,CAAChT,GAAM,EAAD,GAE3CoD,IAAY2N,cAAa,KACXP,EAAK,KACCxQ,EAAK4B,UAAS,KACzBqR,IAAWC,KAAI,UAEdvU,EAAayJ,QAAQW,SAAS9J,WAAWkU,kCAC7CF,IAAWC,MACZ,QA4BoC,OA5BpC,iBACQhE,IAAgB,MAP3BkE,WAAW,EAAD,GACVC,iBAAiB,EAAD,GAChBC,MAAM,EAAD,GACLC,SAAS,EAAD,GAIRvC,UAAU,EAAD,cARewC,cAAa,qBAUvCC,IAAMC,0BACJxE,IACAlP,EAAK4B,UACL,EACA4O,EACAA,GACD,KACDF,EACEyC,EACAvC,EACAA,EACAxQ,EAAK4B,WACN,MACD6R,IAAME,wBACJzE,IACAlP,EAAK4B,UACLmR,EACAvC,EACA,GACA,GA9BEoD,EAAY,6BAmCV5T,EAAI,MACQ+S,EAAuB,UAEjCc,YACJlV,EAAayJ,QAAQW,SAAS9J,WAC9BN,EAAayJ,QAAQW,SAAShK,OAC9B,CAAC6U,GACD,CAACZ,GACDc,IAAaC,cACb,gBACA,eACA,kBAAM,SACNxQ,EACA,GACA,IACD,QACU,OADV,aACDyQ,IAAI,GAAGxE,KAAI,mBAhBbxP,KAAK,EAAD,IACJiU,iBAAiB,EAAD,IAChBzL,YAAY,EAAD,kDAgBd,gBA/DiC,wCAsErBG,EAAY,uCAAG,WAC1BhK,EACA6R,GAA4B,qJAKmC,OAJ/DtI,EAAiC,+BAAG,GACpCC,EAAgC,+BAAG,GACnC+L,EAAuB,uBAEjBlU,EAAuB,QAAnB,EAAa,OAAVkU,QAAU,IAAVA,OAAU,EAAVA,EAAYlU,YAAI,QAAIoD,IAAYyP,QAAQC,WAAW,EAAD,OAEvDrM,YAAczG,EAAK4B,UAAW4O,GAAM,OACvC,GAFCuC,EAAuB,OAE3B,IAE+BpU,EAAaqC,MAAM+F,UAAS,kCAClDN,YAAc9H,EAAaqC,MAAM+F,UAAWyJ,GAAM,oBAAE,GAAC,6BAC5DA,EAAM,KAAD,GAM+B,GARlC2D,EAAwB,KAIxBzB,EAAsB/T,EAAaqT,GACnCoC,EAAoB,GACpBR,EAAe,GACfZ,EAAiC,GACvC/R,QAAQC,IAAI,eAAgBgT,GACvBA,EAAW,CAAD,gBAOe,OAN5BlB,EAAQqB,KAAKrU,GAAM,KACnB4T,EAAaS,KAAI,KAAjBT,EAAY,KAERxQ,IAAY2N,cAAa,KACXP,EAAK,KACCxQ,EAAK4B,UAAS,KACzBqR,IAAWC,KAAI,UAEdvU,EAAayJ,QAAQW,SAAS9J,WAAWkU,kCAC7CF,IAAWC,MACZ,yBACQhE,IAAgB,MAP3BkE,WAAW,EAAD,GACVC,iBAAiB,EAAD,GAChBC,MAAM,EAAD,GACLC,SAAS,EAAD,GAIRvC,UAAU,EAAD,eARewC,cAAa,sBAUvCC,IAAMC,0BACJxE,IACAlP,EAAK4B,UACL,EACA4O,EACAA,GACD,MACDF,EACEyC,EACAvC,EACAA,EACAxQ,EAAK4B,WACN,MACD6R,IAAME,wBACJzE,IACAlP,EAAK4B,UACLmR,EACAvC,EACA,GACA,GACD,6EAKH7R,EAAaqC,MAAMM,WAAW,CAAD,gBACd,OADc,MAC/B8S,EAAiB,UAEP9E,YACJkB,EACA7R,EAAaqC,MAAMM,WAAWE,mBAC/B,QALiB,GAKjB,aACD,GAAC,OALHoP,OAAO,EAAD,IAMNE,YAAY,EACZD,UAAU,GAAK,MARCwD,KAAI,mBAWlB1V,EAAaqC,MAAMM,WAAW0G,YAAY,CAAD,gBAM1B,OALjBoM,EAAkBC,KAAK,CACrBzD,OAAQ9B,IACRgC,YAAY,EACZD,UAAU,IACT,MACHuD,EAAiB,UAEPjF,YACJxQ,EAAaqC,MAAMM,WAAWE,mBAC/B,qBACD,GAAC,OAJHoP,OAAO,EAAD,IAKNE,YAAY,EACZD,UAAU,GAAK,MAPCwD,KAAI,8BAWtB1V,EAAaqC,MAAMuF,sBAAsB,CAAD,gBAGzC,OAFKvG,EAAO,IAAIoD,IAAYoD,UAC3B7H,EAAaqC,MAAMuF,sBAAsBvG,MACzC,EAAD,QAE6ByG,YAAczG,EAAMwQ,GAAM,QAAlD8D,EAAc,OAAsC,GAC1DF,EAAkBC,KAAK,CACrBzD,OAAQ0D,EACRxD,YAAY,EACZD,UAAU,IAGRlS,EAAaqC,MAAMuF,sBAAsBuB,KAAKC,gBAChDqM,EAAkBC,KAAK,CACrBzD,OAAQ5Q,EACR8Q,YAAY,EACZD,UAAU,IAEZuD,EAAkBC,KAAK,CACrBzD,OAAQJ,EACRM,YAAY,EACZD,UAAU,KAEb,QAcF,OAXGlS,EAAaqC,MAAM+F,YACrBqN,EAAkBC,KAAK,CACrBzD,OAAQuD,EACRrD,YAAY,EACZD,UAAU,IAEZuD,EAAkBC,KAAK,CACrBzD,OAAQJ,EACRM,YAAY,EACZD,UAAU,KAEb,UAC6B0B,EAAYvS,EAAK4B,WAAW,KAAD,GAApC,OAAf2S,EAAe,iBACOjC,EAAiBtS,EAAK4B,WAAW,KAAD,GAAzC,OAAb4S,EAAa,iBAE8BhC,EAC/CE,GACA,KAAD,GAFsC,OAEtC,4BAFM+B,EAAmB,KAAEC,EAAW,eAIdjC,EAAaC,GAAoB,QACxB,OAD5BL,EAAS,OAA6C,GAC5DpR,QAAQC,IAAImR,EAAUsC,YAAY,UAELvC,EAC3BzT,EAAayJ,QACbiK,GACA,KAAD,GAG2B,GANtBuC,EAAc,OAKpB3T,QAAQC,IAAI,kBACZD,QAAQC,IAAI0T,GAEU,MAAlBA,EAAsB,iBAUrB,GATHR,EAAkBC,KAAK,CACrBzD,OAAQyB,EACRvB,YAAY,EACZD,UAAU,IAEZuD,EAAkBC,KAAK,CACrBzD,OAAQmC,EACRjC,YAAY,EACZD,UAAU,IAEwB,MAAhClS,EAAaqC,MAAM+F,UAAiB,kCAE9BN,YAAc9H,EAAaqC,MAAM+F,UAAWsL,GAAU,QADxDwC,EAAS,OAEb,GACFT,EAAkBC,KAAK,CACrBzD,OAAQiE,EACR/D,YAAY,EACZD,UAAU,IACT,QAKK,OADZ5P,QAAQC,IAAIkT,EAAkBU,KAAI,SAACC,GAAE,OAAKA,EAAGnE,OAAOnP,eAAa,MACjEmS,EAAY,UACJjV,EAAayJ,QAAQ4M,YAAYC,QAAQP,EAAa,CAC1DQ,SAAU,CACRvW,aAAc+T,EACd+B,sBACAjE,MAAOA,EACPzR,OAAQJ,EAAaqC,MAAMkR,SAC3BlS,KAAMA,EAAK4B,UACXuT,SAAUZ,EACVC,gBACAY,cAAe5E,EACf6E,gBAAiB7E,EACjB8E,qBAAsB/F,EACtBgG,aAAcrG,IACdsG,cAAezE,gBAAcC,UAC7ByE,KAAMrS,IAAY6N,mBAClByE,MAAOtS,IAAYuS,oBACnBC,kBAAmBC,4BACnBC,yBAA0B1S,IAAY2S,4BAExC3B,kBACEA,EAAkB4B,OAAS,EAAI5B,OAAoB7Q,IACrD,QAtBa,OAsBb,mBAtBS8Q,KAAI,4BAyBa7M,EAAiBkL,GAAqB,KAAD,GAA/C,OAA+C,4BAA5DjL,EAAa,gBAEZ9I,EAAayJ,QAAQW,SAAS9J,WAAWyI,eAC7CD,GACA,KAAD,IAHuB,aAKE9I,EAAaqC,MAAM6G,gBAAe,+CAGjDlJ,EAAayJ,QAAQoJ,QAAQyE,cAAcxE,MAChDhK,GACD,SAEuC,OALpCyO,EAAc,OAIpBjV,QAAQC,IAAIgV,GACNC,EAAiBD,EAAelW,KAAK,EAAD,SACF2S,EACtCwD,EACA1O,GACA,KAAD,IAC2B,GAJtB2O,EAAyB,OAI/BnV,QAAQC,IAAIiV,IACRA,EAAe,CAAD,mCACiB5D,EAAY4D,GAAgB,KAAD,IAApC,OAAlBE,EAAkB,kBACc/D,EAAiB6D,GAAgB,KAAD,IAG1D,OAHNG,EAAuB,OAC7BrV,QAAQC,IAAI,mBAAoBuG,EAAchG,YAC9CR,QAAQC,IAAI,cAAevC,EAAaqC,MAAMiR,UAAUxQ,YAAY,MACpEmS,EAAY,WACJjV,EAAayJ,QAAQ4M,YAAYuB,wBAAwB,CAC7DrB,SAAU,CACRvW,aAAc+T,EACdyC,SAAUZ,EACV/D,MAAOA,EACPyF,cAAexO,EACf6N,qBAAsB/F,EACtBqE,aAAcxQ,IAAY2S,2BAC1BI,iBACAE,qBACAC,0BACArE,UAAWtT,EAAaqC,MAAMiR,UAC9BmE,+BAEF,4BAfS/B,KAAI,mFAmBnBpT,QAAQ0E,MAAM,EAAD,KAAQ,SAKM,OADzB6Q,EAAqB,CAAC5C,GACtB6C,EAAgB,CAACzD,GAAS,EAAD,oBAIrBa,YACJlV,EAAayJ,QAAQW,SAAS9J,WAC9BN,EAAayJ,QAAQW,SAAShK,OAC9ByX,EACAC,EACA3C,IAAaC,cACb,gBACA,eACA,kBAAM,SACNxQ,EACA2E,EACAC,GACD,SAEqB,OAflBuO,EAAI,OAcR1C,IAAIc,KAAI,SAAC6B,GAAC,OAAKA,EAAEnH,QACboH,EAAUF,EAAK,GAAE,kBAChB,CACL5N,SAAU8N,EACV5N,YAAauL,IACd,uCAEDtT,QAAQC,IAAI,EAAD,KAAI,kCAEV,MAAI,wEACZ,gBA7QwB,wCAmRnBkP,EAAQ,SAACyG,GACb,OAAO,IAAI9G,SAAQ,SAACC,GAAO,OAAKtG,WAAWsG,EAAS6G,S,mKC5mB1C/C,E,8CAhCCvG,EAAkB,KAoC9B,SAJWuG,OAAY,2BAAZA,IAAY,uBAAZA,IAAY,iCAIvB,CAJWA,MAAY,KAyEjB,IAAMD,EAAgB,uCAAG,WAC9B5U,EACAF,EACA+X,EACAC,GAAuB,qHAOc,GANrCC,EAA0B,+BAAGlD,EAAamD,SAC1CvR,EAAsB,+BAAG,eACzBwR,EAAoD,+BAAG,SAAC1H,EAAM2H,KAC9DC,EAAsD,+BAAG,SAAC5H,EAAM2H,GAAG,OAAK,GACxEE,EAAqB,uBACrBnP,EAAiC,+BAAG,GACpCC,EAAgC,kCAAG,GAE9BpJ,EAAO6C,UAAU,CAAD,qBAAQ,IAAI0V,IAA0B,KAAD,EAEH,GAAjDC,EAA8BrP,EAE/BmP,EAAU,CAAD,iCACOpY,EAAWuY,mBAAmB9R,GAAW,QAA5D2R,EAAS,OAAqDA,UAAU,KAAD,cAGhEI,GACP,IAAM7D,EAAekD,EAAeW,GAC9BzE,EAAU+D,EAAWU,GAE3B,GAA4B,IAAxB7D,EAAaoC,OACf,iBAGF,IAAMxN,EAAc,IAAIkP,cACxB9D,EAAa+D,SAAQ,SAAC3C,GAAW,OAAKxM,EAAYoP,IAAI5C,MACtDxM,EAAYqP,gBAAkBR,EAC9B7O,EAAYsP,SAAW/Y,EAAO6C,UAE1BoR,EAAQgD,OAAS,GACnBxN,EAAYuP,YAAW,MAAvBvP,EAAW,YAAgBwK,IAG7BuE,EAAalD,KAAK7L,IAjBXiP,EAAI,EAAE,KAAD,QAAEA,EAAIX,EAAed,QAAM,iBAA/B,gBAA+B,EAAhCyB,GAAC,wDAAiCA,IAAG,wBA0B7C,OAPDF,EAAalD,KAAI,MAAjBkD,EAAY,YAASpP,IAEf6P,EAA8BT,EAAaU,QAAO,SAACtB,GAAC,OACxDA,EAAEuB,WAAWnX,MAAK,SAACoX,GAAG,OAAKA,EAAIvW,UAAUwW,OAAOrZ,EAAO6C,iBAEnDyW,EAA0Bd,EAAaU,QAC3C,SAACtB,GAAC,OAAMA,EAAEuB,WAAWnX,MAAK,SAACoX,GAAG,OAAKA,EAAIvW,UAAUwW,OAAOrZ,EAAO6C,iBAC/D,EAAD,QACsB7C,EAAOuZ,oBAC5BN,GACA,KAAD,GAFGO,EAAU,OAGdA,EAAaF,EAAwBG,OAAOD,GACtCE,EAAyD,GAE/DxX,QAAQC,IACN,qBACAqX,EAAWvC,OACX,sBACAc,EAAed,QACf,uBACOyB,GAAC,uEAIL,GAHGiB,EAAmBC,EAAsB,CAC7C1Z,aACA2Z,kBAAmBL,EAAWd,KAG5BT,IAAiBlD,EAAamD,SAAQ,0CAEhCyB,EAAiB/K,MAAK,gBAAG6B,EAAI,EAAJA,KAAU,EAAJI,KAAI,OACvCsH,EAAgB1H,EAAMiI,MACtB,KAAD,EACDgB,EAAYpE,KAAKqE,GAAkB,uBAKJ,GALI,yBAEnCzX,QAAQC,IAAI,uBAAwBuW,GACpCxW,QAAQC,IAAI,kBAAkB,EAAD,IAE7BkW,EAAamB,EAAWd,GAAIA,GACxBT,IAAiBlD,EAAaC,cAAa,iBAElC,OAFkC,KAEnC0D,EAAC,UACE1H,QAAQ8B,IAAI4G,GAAY,QAAhC,OAAgC,kBADnCvV,OAAO,EAAD,GACN8Q,IAAI,EAAD,gEAKTyE,EAAYpE,KAAKqE,GAAkB,wDAzB9BjB,EAAI,EAAE,KAAD,QAAEA,EAAIc,EAAWvC,QAAM,0CAA5ByB,GAAC,qGAA6BA,IAAG,2BA6BtCT,IAAiBlD,EAAamD,SAAQ,kCACnBlH,QAAQ8B,IAAI4G,GAAa,KAAD,GAAjC,OAANI,EAAM,yBACL,CAAE3V,OAAQqV,EAAWvC,OAAQhC,IAAK6E,IAAQ,QAGjB,OAHiB,KAGlCN,EAAWvC,OAAM,UAAajG,QAAQ8B,IAAI4G,GAAY,8CAA9DvV,OAAO,EAAD,GAAqB8Q,IAAI,EAAD,iDACxC,gBA/F4B,4CA4MhB8E,EAAY,WACvB,OAAO,IAAIzV,MAAOC,UAAY,KAGzB,SAAeqV,EAAsB,GAAD,+BAmF1C,4CAnFM,qDAAA1Y,EAAA,sDAeO,OAdZ2Y,EAAiB,EAAjBA,kBACA3Z,EAAU,EAAVA,WAAW,EAAD,EACVwQ,eAAO,MAAGlC,EAAe,EASnBwL,EAAiBH,EAAkBI,YAEnCC,EAAYH,IACdlJ,EAAO,EAAE,EAAD,OAC6B3Q,EAAWia,mBAClDH,EACA,CACEI,eAAe,IAEjB,KAAD,EAYI,OAjBC3J,EAA0B,OAOhCvO,QAAQC,IAAI,oCAAqCsO,GAE7CG,GAAO,EACX,sBAAC,sBAAA1P,EAAA,yDACS0P,KAAQmJ,IAAcG,EAAYxJ,GAAO,gBAG5C,OAFHxQ,EAAWia,mBAAmBH,EAAgB,CAC5CI,eAAe,IACd,SACG/I,EAAM,KAAK,KAAD,2DALpB,GAOK,oBAEwB3H,EACzB+G,EACAC,EACAxQ,EACA,UACA,GACA,KAAD,GANiB,GAAZma,EAAY,OAQA,CAAD,sBACT,IAAIhX,MAAM,kDAAkD,KAAD,OAE/DgX,EAAa7Q,IAAI,CAAD,gBACc,MAAhCtH,QAAQ0E,MAAMyT,EAAa7Q,KACrB,IAAInG,MAAM,gDAAgD,KAAD,GAGjEwN,GAAmB,OAAZwJ,QAAY,IAAZA,OAAY,EAAZA,EAAcxJ,OAAQ,EAAE,wBAEY,GAFZ,2BAE/B3O,QAAQ0E,MAAM,uBAAuB,EAAD,KAChC,KAAI8J,QAAQ,CAAD,sBACP,IAAIrN,MAAM,kDAAkD,KAAD,GAEL,OAA1DiX,EAAsD,KAAK,EAAD,kBAGpDC,EAAoBra,EAAY2Z,EAAmB,UAAS,QADpES,EAAc,OAEZjZ,MAAM,EAAD,6DAELiZ,IAAkBA,EAAe9Q,IAAG,qBAClC8Q,EAAeE,KAAK,CAAD,gBACZ9B,EAAI4B,EAAeE,KAAKvD,OAAS,EAAE,KAAD,QAAEyB,GAAK,GAAC,iBACb,KAA9B+B,EAAOH,EAAeE,KAAK9B,IACxBxP,WAAW,iBAAiB,CAAD,sBAC5B,IAAI7F,MACR,uBAAyBoX,EAAKC,MAAM,gBAAgBzD,SACpD,KAAD,KALkDyB,EAAC,8BASpD,IAAIrV,MAAMsX,KAAKC,UAAUN,EAAe9Q,MAAM,KAAD,GAIzC,OAJyC,UAIrDoH,GAAO,EAAK,qBAGwC,OAAtD1O,QAAQC,IAAI,UAAWsO,EAAMsJ,IAAcG,GAAW,kBAC/C,CAAEzJ,OAAMI,SAAM,0EACtB,+BAEc0J,EAAoB,EAAD,iDAwBjC,OAxBiC,wBAAlC,WACEra,EACAuJ,EACA9C,GAAsB,+FAGczG,EAAW2a,iBAE7C3a,EAAW4a,0BACX,KAAD,EASD,OAZArR,EAAYqP,gBAAe,OAKrBiC,EAAWtR,EAAYuR,mBAEvBC,EAAkBxR,EAAYyR,WAAWH,GACzCI,EAAqBF,EAAgBrF,SAAS,UAE9CwF,EAAO,CAACD,EADM,CAAEE,SAAU,SAAU1U,eAG1C,UACkBzG,EAAWob,YAAY,sBAAuBF,GAAM,KAAD,GAA5D,KAAHG,EAAG,QACD3U,MAAM,CAAD,sBACL,IAAIvD,MAAM,mCAAqCkY,EAAI3U,MAAM9B,SAAS,KAAD,4BAElEyW,EAAIzB,QAAM,6CAClB,+BAEcpQ,EAAsC,EAAD,iDAyFnD,OAzFmD,wBAApD,WACE+G,EACAC,EACAxQ,GAAsB,2FAUT,OATbyG,EAAsB,+BAAG,SACzBgK,EAAW,gCAEPC,GAAO,EACP/R,EAAwC,CAC1CgS,KAAM,EACNC,cAAe,EACftH,IAAK,MAEHuH,EAAQ,EAAE,EAAD,OACE,IAAIC,QAAO,uCAAC,WAAOC,EAASC,GAAM,iEAC/CvG,YAAW,WACLiG,IAGJA,GAAO,EACP1O,QAAQC,IAAI,4BACZ+O,EAAO,CAAER,SAAS,OACjBA,GACH,IACEK,EAAQ7Q,EAAWsb,YACjB/K,GACA,SAACqJ,EAAQ2B,GACP7K,GAAO,EACP/R,EAAS,CACP2K,IAAKsQ,EAAOtQ,IACZqH,KAAM4K,EAAQ5K,KACdC,cAAe,GAEbgJ,EAAOtQ,KACTtH,QAAQC,IAAI,yBAA0B2X,EAAOtQ,KAC7C0H,EAAOrS,KAEPqD,QAAQC,IAAI,yBAA0B2X,GACtC7I,EAAQpS,MAGZ8H,GAEF,MAAO0F,GACPuE,GAAO,EACP1O,QAAQ0E,MAAM,oBAAqB6J,EAAMpE,GAC1C,UACOuE,IAAQD,EAAW,gBA4BpB,OA1BL,sBAAC,4BAAAzP,EAAA,+EAEmChB,EAAWiR,qBAAqB,CAC9DV,IACC,KAAD,EAFIW,EAAiB,OAGvBvS,EAASuS,GAAqBA,EAAkB/P,MAAM,GACjDuP,IACE/R,EAEMA,EAAO2K,KAChBtH,QAAQC,IAAI,iBAAkBsO,EAAM5R,GACpC+R,GAAO,EACPM,EAAOrS,EAAO2K,MACJ3K,EAAOiS,eAGjB5O,QAAQC,IAAI,wBAAyBsO,EAAM5R,GAC3C+R,GAAO,EACPK,EAAQpS,IAJRqD,QAAQC,IAAI,4BAA6BsO,EAAM5R,GAN/CqD,QAAQC,IAAI,uBAAwBsO,EAAM5R,IAY7C,gDAEI+R,GACH1O,QAAQC,IAAI,8BAA+BsO,EAAK,EAAD,IAChD,wDAxBL,GA0BK,SACCY,EAAM,KAAM,KAAD,4DAEpB,qDAhEyB,IAgEvB,KAAD,EAhEI,OAANxS,EAAM,0BAoEEqB,EAAWoR,wBAAwBP,GAAO,KAAD,6DAKT,OADxCH,GAAO,EACP1O,QAAQC,IAAI,mBAAoBtD,GAAQ,kBACjCA,GAAM,0DACd,wBACM,SAASwS,EAAMyG,GACpB,OAAO,IAAI9G,SAAQ,SAACC,GAAO,OAAKtG,WAAWsG,EAAS6G,S","file":"static/js/main.efb3751b.chunk.js","sourcesContent":["import { Paper } from \"@mui/material\";\r\nimport Countdown from \"react-countdown\";\r\nimport React from \"react\";\r\nimport { styled } from \"@mui/system\";\r\n\r\nconst RootContainer = styled(\"div\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  padding: theme.spacing(0),\r\n  \"& > *\": {\r\n    margin: theme.spacing(0.4),\r\n    width: theme.spacing(6),\r\n    height: theme.spacing(6),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignContent: \"center\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    background: \"#384457\",\r\n    color: \"white\",\r\n    borderRadius: 5,\r\n    fontSize: 10,\r\n  },\r\n}));\r\n\r\nconst DoneContainer = styled(\"span\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  margin: 0,\r\n  marginBottom: theme.spacing(0.5),\r\n  height: theme.spacing(3.5),\r\n  padding: theme.spacing(1),\r\n  flexDirection: \"column\",\r\n  alignContent: \"center\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  background: \"#384457\",\r\n  color: \"white\",\r\n  borderRadius: 5,\r\n  fontWeight: \"bold\",\r\n  fontSize: 18,\r\n}));\r\n\r\nconst ItemContainer = styled(\"span\")({\r\n  fontWeight: \"bold\",\r\n  fontSize: 18,\r\n});\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <DoneContainer>{status}</DoneContainer> : null;\r\n    } else {\r\n      return (\r\n        <RootContainer style={style}>\r\n          <Paper elevation={0}>\r\n            <ItemContainer>{hours < 10 ? `0${hours}` : hours}</ItemContainer>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <ItemContainer>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </ItemContainer>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <ItemContainer>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </ItemContainer>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </RootContainer>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import styled from \"styled-components\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { CandyMachineAccount } from \"./candy-machine\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport {\r\n  findGatewayToken,\r\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\r\n  onGatewayTokenChange,\r\n  removeAccountChangeListener,\r\n} from \"@identity.com/solana-gateway-ts\";\r\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, black 0%, black 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n  setIsMinting,\r\n  isActive,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n  setIsMinting: (val: boolean) => void;\r\n  isActive: boolean;\r\n}) => {\r\n  const wallet = useWallet();\r\n  const connection = useConnection();\r\n  const [verified, setVerified] = useState(false);\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\r\n  const [clicked, setClicked] = useState(false);\r\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\r\n\r\n  const getMintButtonContent = () => {\r\n    if (candyMachine?.state.isSoldOut) {\r\n      return \"SOLD OUT\";\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (\r\n      candyMachine?.state.isPresale ||\r\n      candyMachine?.state.isWhitelistOnly\r\n    ) {\r\n      return \"WHITELIST MINT\";\r\n    }\r\n\r\n    return \"MINT\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    const mint = async () => {\r\n      await removeAccountChangeListener(\r\n        connection.connection,\r\n        webSocketSubscriptionId\r\n      );\r\n      await onMint();\r\n\r\n      setClicked(false);\r\n      setVerified(false);\r\n    };\r\n    if (verified && clicked) {\r\n      mint();\r\n    }\r\n  }, [\r\n    verified,\r\n    clicked,\r\n    connection.connection,\r\n    onMint,\r\n    webSocketSubscriptionId,\r\n  ]);\r\n\r\n  const previousGatewayStatus = usePrevious(gatewayStatus);\r\n  useEffect(() => {\r\n    const fromStates = [\r\n      GatewayStatus.NOT_REQUESTED,\r\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\r\n    ];\r\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\r\n    if (\r\n      fromStates.find((state) => previousGatewayStatus === state) &&\r\n      !invalidToStates.find((state) => gatewayStatus === state)\r\n    ) {\r\n      setIsMinting(true);\r\n    }\r\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\r\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\r\n\r\n  useEffect(() => {\r\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\r\n      console.log(\"Minting after token active\");\r\n      setWaitForActiveToken(false);\r\n      onMint();\r\n    }\r\n  }, [waitForActiveToken, gatewayStatus, onMint]);\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={isMinting || !isActive}\r\n      onClick={async () => {\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          const network =\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\r\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\r\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n              await onMint();\r\n            } else {\r\n              // setIsMinting(true);\r\n              setWaitForActiveToken(true);\r\n              await requestGatewayToken();\r\n              console.log(\"after: \", gatewayStatus);\r\n            }\r\n          } else if (\r\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\r\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\r\n          ) {\r\n            setClicked(true);\r\n            const gatewayToken = await findGatewayToken(\r\n              connection.connection,\r\n              wallet.publicKey!,\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork\r\n            );\r\n\r\n            if (gatewayToken?.isValid()) {\r\n              await onMint();\r\n            } else {\r\n              window.open(\r\n                `https://verify.encore.fans/?gkNetwork=${network}`,\r\n                \"_blank\"\r\n              );\r\n\r\n              const gatewayTokenAddress =\r\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\r\n                  wallet.publicKey!,\r\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\r\n                );\r\n\r\n              setWebSocketSubscriptionId(\r\n                onGatewayTokenChange(\r\n                  connection.connection,\r\n                  gatewayTokenAddress,\r\n                  () => setVerified(true),\r\n                  \"confirmed\"\r\n                )\r\n              );\r\n            }\r\n          } else {\r\n            setClicked(false);\r\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n\r\nfunction usePrevious<T>(value: T): T | undefined {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { Container, Snackbar } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Alert from \"@mui/lab/Alert\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n} from \"@solana/web3.js\";\r\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CANDY_MACHINE_PROGRAM,\r\n  CandyMachineAccount,\r\n  createAccountsForMint,\r\n  getCandyMachineState,\r\n  getCollectionPDA,\r\n  mintOneToken,\r\n  SetupState,\r\n} from \"./candy-machine\";\r\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\r\n// import { AlertState, getAtaForMint, toDate } from \"./utils\";\r\n\r\nimport { MintCountdown } from \"./MintCountdown\";\r\nimport { MintButton } from \"./MintButton\";\r\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport { SolanaMobileWalletAdapterWalletName } from \"@solana-mobile/wallet-adapter-mobile\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, black 0%, black 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n  network: WalletAdapterNetwork;\r\n  error?: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [isValidBalance, setIsValidBalance] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const anchorWallet = useAnchorWallet();\r\n  const { connect, connected, publicKey, wallet } = useWallet();\r\n  const cluster = props.network;\r\n\r\n  const refreshCandyMachineState = useCallback(\r\n    async (commitment: Commitment = \"confirmed\") => {\r\n      if (!publicKey) {\r\n        return;\r\n      }\r\n      if (props.error !== undefined) {\r\n        setAlertState({\r\n          open: true,\r\n          message: props.error,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const connection = new Connection(props.rpcHost, commitment);\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet as anchor.Wallet,\r\n            props.candyMachineId,\r\n            connection\r\n          );\r\n          console.log(\"Candy machine state: \", cndy);\r\n          let active = cndy?.state.goLiveDate\r\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\r\n            : false;\r\n          let presale = false;\r\n\r\n          // duplication of state to make sure we have the right values!\r\n          let isWLUser = false;\r\n          let userPrice = cndy.state.price;\r\n\r\n          // whitelist mint?\r\n          if (cndy?.state.whitelistMintSettings) {\r\n            // is it a presale mint?\r\n            if (\r\n              cndy.state.whitelistMintSettings.presale &&\r\n              (!cndy.state.goLiveDate ||\r\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\r\n            ) {\r\n              presale = true;\r\n            }\r\n            // is there a discount?\r\n            if (cndy.state.whitelistMintSettings.discountPrice) {\r\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\r\n            } else {\r\n              setDiscountPrice(undefined);\r\n              // when presale=false and discountPrice=null, mint is restricted\r\n              // to whitelist users only\r\n              if (!cndy.state.whitelistMintSettings.presale) {\r\n                cndy.state.isWhitelistOnly = true;\r\n              }\r\n            }\r\n            // retrieves the whitelist token\r\n            const mint = new anchor.web3.PublicKey(\r\n              cndy.state.whitelistMintSettings.mint\r\n            );\r\n            const token = (await getAtaForMint(mint, publicKey))[0];\r\n\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n              isWLUser = parseInt(balance.value.amount) > 0;\r\n              // only whitelist the user if the balance > 0\r\n              setIsWhitelistUser(isWLUser);\r\n\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = isWLUser && (presale || active);\r\n              }\r\n            } catch (e) {\r\n              setIsWhitelistUser(false);\r\n              // no whitelist user, no mint\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = false;\r\n              }\r\n              console.log(\r\n                \"There was a problem fetching whitelist token balance\"\r\n              );\r\n              console.log(e);\r\n            }\r\n          }\r\n          userPrice = isWLUser ? userPrice : cndy.state.price;\r\n\r\n          if (cndy?.state.tokenMint) {\r\n            // retrieves the SPL token\r\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\r\n            const token = (await getAtaForMint(mint, publicKey))[0];\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n\r\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\r\n\r\n              // only allow user to mint if token balance >  the user if the balance > 0\r\n              setIsValidBalance(valid);\r\n              active = active && valid;\r\n            } catch (e) {\r\n              setIsValidBalance(false);\r\n              active = false;\r\n              // no whitelist user, no mint\r\n              console.log(\"There was a problem fetching SPL token balance\");\r\n              console.log(e);\r\n            }\r\n          } else {\r\n            const balance = new anchor.BN(\r\n              await connection.getBalance(publicKey)\r\n            );\r\n            const valid = balance.gte(userPrice);\r\n            setIsValidBalance(valid);\r\n            active = active && valid;\r\n          }\r\n\r\n          // datetime to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.date) {\r\n            setEndDate(toDate(cndy.state.endSettings.number));\r\n            if (\r\n              cndy.state.endSettings.number.toNumber() <\r\n              new Date().getTime() / 1000\r\n            ) {\r\n              active = false;\r\n            }\r\n          }\r\n          // amount to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.amount) {\r\n            const limit = Math.min(\r\n              cndy.state.endSettings.number.toNumber(),\r\n              cndy.state.itemsAvailable\r\n            );\r\n            if (cndy.state.itemsRedeemed < limit) {\r\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n            } else {\r\n              setItemsRemaining(0);\r\n              cndy.state.isSoldOut = true;\r\n            }\r\n          } else {\r\n            setItemsRemaining(cndy.state.itemsRemaining);\r\n          }\r\n\r\n          if (cndy.state.isSoldOut) {\r\n            active = false;\r\n          }\r\n\r\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n          const collectionPDAAccount = await connection.getAccountInfo(\r\n            collectionPDA\r\n          );\r\n\r\n          setIsActive((cndy.state.isActive = active));\r\n          setIsPresale((cndy.state.isPresale = presale));\r\n          setCandyMachine(cndy);\r\n\r\n          const txnEstimate =\r\n            892 +\r\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n            (cndy.state.tokenMint ? 66 : 0) +\r\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n            (cndy.state.gatekeeper ? 33 : 0) +\r\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n          setNeedTxnSplit(txnEstimate > 1230);\r\n        } catch (e) {\r\n          if (e instanceof Error) {\r\n            if (\r\n              e.message === `Account does not exist ${props.candyMachineId}`\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value wrong in your .env file, or you are using the wrong RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            } else if (\r\n              e.message.startsWith(\"failed to get info about account\")\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            }\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: `${e}`,\r\n              severity: \"error\",\r\n              hideDuration: null,\r\n            });\r\n          }\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n      }\r\n    },\r\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\r\n  );\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = []\r\n  ) => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      if (connected && candyMachine?.program && publicKey) {\r\n        let setupMint: SetupState | undefined;\r\n        if (needTxnSplit && setupTxn === undefined) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign account setup transaction\",\r\n            severity: \"info\",\r\n          });\r\n          setupMint = await createAccountsForMint(candyMachine, publicKey);\r\n          let status: any = { err: true };\r\n          if (setupMint.transaction) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              setupMint.transaction,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true\r\n            );\r\n          }\r\n          if (status && !status.err) {\r\n            setSetupTxn(setupMint);\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                \"Setup transaction succeeded! Please sign minting transaction\",\r\n              severity: \"info\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Mint failed! Please try again!\",\r\n              severity: \"error\",\r\n            });\r\n            setIsUserMinting(false);\r\n            return;\r\n          }\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign minting transaction\",\r\n            severity: \"info\",\r\n          });\r\n        }\r\n\r\n        const mintResult = await mintOneToken(\r\n          candyMachine,\r\n          publicKey,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n          setupMint ?? setupTxn\r\n        );\r\n\r\n        let status: any = { err: true };\r\n        let metadataStatus = null;\r\n        if (mintResult) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintResult.mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true\r\n          );\r\n\r\n          metadataStatus =\r\n            await candyMachine.program.provider.connection.getAccountInfo(\r\n              mintResult.metadataKey,\r\n              \"processed\"\r\n            );\r\n          console.log(\"Metadata status: \", !!metadataStatus);\r\n        }\r\n\r\n        if (status && !status.err && metadataStatus) {\r\n          // manual update since the refresh might not detect\r\n          // the change immediately\r\n          const remaining = itemsRemaining! - 1;\r\n          setItemsRemaining(remaining);\r\n          setIsActive((candyMachine.state.isActive = remaining > 0));\r\n          candyMachine.state.isSoldOut = remaining === 0;\r\n          setSetupTxn(undefined);\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n            hideDuration: 7000,\r\n          });\r\n          refreshCandyMachineState(\"processed\");\r\n        } else if (status && !status.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message:\r\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\r\n            severity: \"error\",\r\n            hideDuration: 8000,\r\n          });\r\n          refreshCandyMachineState();\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n          refreshCandyMachineState();\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n      // updates the candy machine state to reflect the latest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    (function loop() {\r\n      setTimeout(() => {\r\n        refreshCandyMachineState();\r\n        loop();\r\n      }, 20000);\r\n    })();\r\n  }, [refreshCandyMachineState]);\r\n\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"sm\" style={{ position: \"relative\" }}>\r\n        {/* <div className=\"transparent-background\"> */}\r\n        <Paper\r\n          className=\"transparent-background\"\r\n          // style={{\r\n          //   padding: 24,\r\n          //   paddingBottom: 10,\r\n          // backgroundColor: \"transparent\",\r\n          //   borderRadius: 6,\r\n          //   color: \"black\",\r\n          //   // width: \"500px\",\r\n          // }}\r\n        >\r\n          {/* <Typography\r\n            variant=\"caption\"\r\n            align=\"center\"\r\n            display=\"block\"\r\n            style={{ marginTop: 7, color: \"grey\" }}\r\n          >\r\n            Powered by METAPLEX\r\n          </Typography> */}\r\n          <div\r\n            style={{\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <div className=\" m-auto container\">\r\n              <div\r\n                className=\"flex justify-center items-center text-center h-screen main-height\"\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <div className=\"max-w-xl md:bg-[#E1F2DD] rounded-lg shadow-lg px-10 border border-black\">\r\n                  <div className=\"relative mx-auto logoRelative\">\r\n                    <img\r\n                      src=\"/favicon.png\"\r\n                      alt=\"\"\r\n                      className=\"absolute -top-[72px] left-[184px] h-32 w-32 logoAbsolute\"\r\n                    />\r\n                  </div>\r\n                  {/* ---->>>> Haading  <<<<---- */}\r\n                  <h2 className=\"text-2xl text-center py-6 mt-10 theGuardians\">\r\n                    The Guardians of the Forest\r\n                  </h2>\r\n                  <p>\r\n                    <b>\r\n                      Launch Date : February 3<sup>rd</sup> , 2023 @ 4pm EST\r\n                      Animal: Wolf Class: Healer Quantity: 105 NFTs available\r\n                      Rarirty: 16th of 52\r\n                      {/*\r\n                    <p>\r\n                      which is the Wolf Healer (week 1) and Owl Pirate (week 2)\r\n                    </p>\r\n                    */}\r\n                    </b>\r\n                  </p>\r\n\r\n                  <div\r\n                    className=\"flex justify-center\"\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className=\"rounded-xl py-2 px-4 box-border border border-black font-medium text-xl\"\r\n                      style={{\r\n                        padding: \"0px 8px\",\r\n                        border: \"1px solid black\",\r\n                        borderRadius: \"5px\",\r\n                        fontSize: \"16px\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {/* <p>Launch Date : 6th Jan 2023 </p> */}\r\n                      <p>NFT price : 2 SOL </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"mintNfts\">\r\n                    <h2>Total NFTs : 10000</h2>\r\n                    {/* <p>\r\n                      Only 106 NFTs are available for minting in the 1\r\n                      <sup>st</sup> week{\" \"}\r\n                    </p> */}\r\n                  </div>\r\n\r\n                  {!connected ? (\r\n                    <div className=\"button-hide\">\r\n                      <ConnectButton\r\n                        onClick={(e) => {\r\n                          if (\r\n                            wallet?.adapter.name ===\r\n                            SolanaMobileWalletAdapterWalletName\r\n                          ) {\r\n                            connect();\r\n                            e.preventDefault();\r\n                          }\r\n                        }}\r\n                      >\r\n                        Connect Wallet\r\n                      </ConnectButton>\r\n                    </div>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"button-hide\">\r\n                        {candyMachine && (\r\n                          <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justifyContent=\"center\"\r\n                            wrap=\"nowrap\"\r\n                          >\r\n                            <Grid\r\n                              item\r\n                              xs={3}\r\n                              style={{\r\n                                color: \"black\",\r\n                              }}\r\n                            >\r\n                              <Typography\r\n                                variant=\"body2\"\r\n                                color=\"textSecondary\"\r\n                                style={{\r\n                                  color: \"black\",\r\n                                }}\r\n                              >\r\n                                Remaining\r\n                              </Typography>\r\n                              <Typography\r\n                                variant=\"h6\"\r\n                                color=\"textPrimary\"\r\n                                style={{\r\n                                  fontWeight: \"bold\",\r\n                                  color: \"black\",\r\n                                }}\r\n                              >\r\n                                {`${itemsRemaining}`}\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                              <Typography\r\n                                variant=\"body2\"\r\n                                color=\"textSecondary\"\r\n                                style={{\r\n                                  color: \"black\",\r\n                                }}\r\n                              >\r\n                                {isWhitelistUser && discountPrice\r\n                                  ? \"Discount Price\"\r\n                                  : \"Price\"}\r\n                              </Typography>\r\n                              <Typography\r\n                                variant=\"h6\"\r\n                                color=\"textPrimary\"\r\n                                style={{ fontWeight: \"bold\", color: \"black\" }}\r\n                              >\r\n                                {isWhitelistUser && discountPrice\r\n                                  ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                                  : `◎ ${formatNumber.asNumber(\r\n                                      candyMachine.state.price\r\n                                    )}`}\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={5}>\r\n                              {isActive &&\r\n                              endDate &&\r\n                              Date.now() < endDate.getTime() ? (\r\n                                <>\r\n                                  <MintCountdown\r\n                                    key=\"endSettings\"\r\n                                    date={getCountdownDate(candyMachine)}\r\n                                    style={{ justifyContent: \"flex-end\" }}\r\n                                    status=\"COMPLETED\"\r\n                                    onComplete={toggleMintButton}\r\n                                  />\r\n                                  <Typography\r\n                                    variant=\"caption\"\r\n                                    align=\"center\"\r\n                                    display=\"block\"\r\n                                    style={{ fontWeight: \"bold\" }}\r\n                                  >\r\n                                    TO END OF MINT\r\n                                  </Typography>\r\n                                </>\r\n                              ) : (\r\n                                <>\r\n                                  <MintCountdown\r\n                                    key=\"goLive\"\r\n                                    date={getCountdownDate(candyMachine)}\r\n                                    style={{ justifyContent: \"flex-end\" }}\r\n                                    status={\r\n                                      candyMachine?.state?.isSoldOut ||\r\n                                      (endDate &&\r\n                                        Date.now() > endDate.getTime())\r\n                                        ? \"COMPLETED\"\r\n                                        : isPresale\r\n                                        ? \"PRESALE\"\r\n                                        : \"UPCOMING\"\r\n                                    }\r\n                                    onComplete={toggleMintButton}\r\n                                  />\r\n                                  {isPresale &&\r\n                                    candyMachine.state.goLiveDate &&\r\n                                    candyMachine.state.goLiveDate.toNumber() >\r\n                                      new Date().getTime() / 1000 && (\r\n                                      <Typography\r\n                                        variant=\"caption\"\r\n                                        align=\"center\"\r\n                                        display=\"block\"\r\n                                        style={{ fontWeight: \"bold\" }}\r\n                                      >\r\n                                        UNTIL PUBLIC MINT\r\n                                      </Typography>\r\n                                    )}\r\n                                </>\r\n                              )}\r\n                            </Grid>\r\n                          </Grid>\r\n                        )}\r\n                        <div>\r\n                          <MintContainer>\r\n                            {candyMachine?.state.isActive &&\r\n                            candyMachine?.state.gatekeeper &&\r\n                            publicKey &&\r\n                            anchorWallet?.signTransaction ? (\r\n                              <GatewayProvider\r\n                                wallet={{\r\n                                  publicKey:\r\n                                    publicKey ||\r\n                                    new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                                  signTransaction: anchorWallet.signTransaction,\r\n                                }}\r\n                                gatekeeperNetwork={\r\n                                  candyMachine?.state?.gatekeeper\r\n                                    ?.gatekeeperNetwork\r\n                                }\r\n                                clusterUrl={rpcUrl}\r\n                                cluster={cluster}\r\n                                options={{ autoShowModal: false }}\r\n                              >\r\n                                <MintButton\r\n                                  candyMachine={candyMachine}\r\n                                  isMinting={isUserMinting}\r\n                                  setIsMinting={(val) => setIsUserMinting(val)}\r\n                                  onMint={onMint}\r\n                                  isActive={\r\n                                    isActive ||\r\n                                    (isPresale &&\r\n                                      isWhitelistUser &&\r\n                                      isValidBalance)\r\n                                  }\r\n                                />\r\n                              </GatewayProvider>\r\n                            ) : (\r\n                              <MintButton\r\n                                candyMachine={candyMachine}\r\n                                isMinting={isUserMinting}\r\n                                setIsMinting={(val) => setIsUserMinting(val)}\r\n                                onMint={onMint}\r\n                                isActive={\r\n                                  isActive ||\r\n                                  (isPresale &&\r\n                                    isWhitelistUser &&\r\n                                    isValidBalance)\r\n                                }\r\n                              />\r\n                            )}\r\n                          </MintContainer>\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n\r\n                  <div className=\"my-4\">\r\n                    <br />* After the mint, NFTs will be listed on Magic Eden\r\n                    between 48 to 72 hours. <br />* NFTs can be minted through\r\n                    the browser in the Phantom mobile Application, but minting\r\n                    through the Desktop browser extension is recommended. <br />\r\n                    * We and the Echo Forest Foundation thank you for your\r\n                    support.\r\n                    <br />\r\n                    <strong>*Phantom Wallet only</strong>\r\n                  </div>\r\n\r\n                  <div\r\n                    className=\"max-w-full mt-6 mb-6 text-center\"\r\n                    style={{\r\n                      fontWeight: \"bold\",\r\n                      color: \"black\",\r\n                      textAlign: \"center\",\r\n                    }}\r\n                  >\r\n                    <h2 className=\"mb-1\">How to setup the Phantom Wallet</h2>\r\n                    <a\r\n                      href=\"https://www.youtube.com/watch?v=BiZJDWgxIvs&feature=emb_title\"\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      <div className=\"font-medium text-blue-600 text-sm\">\r\n                        https://www.youtube.com/watch?v=BiZJDWgxIvs&feature=emb_title\r\n                      </div>\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Paper>\r\n        {/* </div> */}\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={\r\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\r\n        }\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? candyMachine.state.goLiveDate\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import styled from \"styled-components\";\r\n\r\nconst Container = styled(\"div\")`\r\n  height: auto;\r\n  margin-top: 100px;\r\n  // display: flex;\r\n  // flex-wrap: wrap;\r\n  // justify-content: center;\r\n  // align-items: center;\r\n  // position: relative;\r\n`;\r\n\r\n// const Grid = styled(\"div\")`\r\n//   height: auto;\r\n//   margin-top: 100px;\r\n//   display: grid;\r\n//   grid-template-columns: repeat(2, minmax(0, 1fr));\r\n// `;\r\n\r\n// const Title = styled(\"h1\")`\r\n//   margin: 0;\r\n//   white-space: nowrap;\r\n//   font-family: \"Bungee\", cursive;\r\n// `;\r\n\r\n// const Img1 = styled(\"img\")`\r\n//   height: 100vh;\r\n//   width: 100vw;\r\n//   overflow-x: hidden;\r\n// `;\r\n\r\n// const OverFlowHidden = styled(\"div\")`\r\n//   overflow: hidden;\r\n// `;\r\n\r\n// const Link = styled(\"a\")`\r\n//   font-size: 1.5rem;\r\n//   margin: 1rem;\r\n//   cursor: pointer;\r\n//   color: initial;\r\n//   text-decoration: none;\r\n\r\n//   position: absolute;\r\n//   right: 5%;\r\n\r\n//   @media (max-width: 700px) {\r\n//     position: initial;\r\n//   }\r\n// `;\r\n\r\nconst TheImages = () => {\r\n  return (\r\n    <Container>\r\n      {/* <Title>\r\n                Titan Dogs\r\n            </Title>\r\n            <Link href=\"/#roadmap\">\r\n                Roadmap\r\n            </Link> */}\r\n\r\n      {/* <Grid> */}\r\n      {/* <OverFlowHidden>\r\n        <Img1\r\n          src=\"https://cdn.discordapp.com/attachments/999351099851026493/1060230259661885570/Fk7iAFcXEAA78L1.png\"\r\n          alt=\"\"\r\n        />\r\n      </OverFlowHidden> */}\r\n\r\n      <div>0123456</div>\r\n      {/* </Grid> */}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TheImages;\r\n","import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Home from \"./Home\";\r\nimport { DEFAULT_TIMEOUT } from \"./connection\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material\";\r\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\r\nimport { SlopeWalletAdapter } from \"@solana/wallet-adapter-slope\";\r\nimport { SolflareWalletAdapter } from \"@solana/wallet-adapter-solflare\";\r\nimport {\r\n  SolletWalletAdapter,\r\n  SolletExtensionWalletAdapter,\r\n} from \"@solana/wallet-adapter-sollet\";\r\nimport TheImages from \"./components/TheImages\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\r\n  } catch (e) {\r\n    console.log(\"Failed to construct CandyMachineId\", e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nlet error: string | undefined = undefined;\r\n\r\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\r\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\r\n}\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\r\n  \"devnet\") as WalletAdapterNetwork;\r\nconst rpcHost =\r\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      new PhantomWalletAdapter(),\r\n      new SolflareWalletAdapter({ network }),\r\n      new SlopeWalletAdapter(),\r\n      new SolletWalletAdapter({ network }),\r\n      new SolletExtensionWalletAdapter({ network }),\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <ConnectionProvider endpoint={endpoint}>\r\n          <WalletProvider wallets={wallets} autoConnect>\r\n            <WalletDialogProvider>\r\n              <Home\r\n                candyMachineId={candyMachineId}\r\n                connection={connection}\r\n                txTimeout={DEFAULT_TIMEOUT}\r\n                rpcHost={rpcHost}\r\n                network={network}\r\n                error={error}\r\n              />\r\n              <TheImages/>\r\n            </WalletDialogProvider>\r\n          </WalletProvider>\r\n        </ConnectionProvider>\r\n      </ThemeProvider>\r\n\r\n      {/* <div className=\"w-screen\">\r\n        <img src=\"https://cdn.discordapp.com/attachments/999351099851026493/1060230259661885570/Fk7iAFcXEAA78L1.png\" alt=\"\" />\r\n      </div> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from \"@project-serum/anchor\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { SystemProgram } from \"@solana/web3.js\";\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n  hideDuration?: number | null;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return \"--\";\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\r\n);\r\n\r\nexport const CIVIC_GATEKEEPER_NETWORK =\r\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\r\n    CIVIC\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from(\"gateway\"),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","/* eslint-disable */\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\r\nimport {\r\n  SystemProgram,\r\n  Transaction,\r\n  SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from \"@solana/web3.js\";\r\nimport { sendTransactions, SequenceType } from \"./connection\";\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from \"./utils\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\ninterface CandyMachineState {\r\n  authority: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: null | anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  isWhitelistOnly: boolean;\r\n  goLiveDate: null | anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n  retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  const subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    await connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"processed\",\r\n  });\r\n\r\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\r\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n    return [program, state];\r\n  };\r\n\r\n  const getCurrentBlockTime = async (): Promise<number> => {\r\n    const slot = await connection.getSlot();\r\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\r\n  };\r\n\r\n  const [[program, state], currentBlockTime] = await Promise.all([\r\n    getProgramState(),\r\n    getCurrentBlockTime(),\r\n  ]);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  // const itemsRemaining = 150;\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\r\n  const goLiveDate =\r\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      authority: state.authority,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive: false,\r\n      isPresale: false,\r\n      isWhitelistOnly: false,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n      retainAuthority: state.data.retainAuthority,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getFreezePdaState = async (\r\n  program: anchor.Program,\r\n  freezePda: anchor.web3.PublicKey\r\n): Promise<any> => {\r\n  try {\r\n    const state: any = await program.account.freezePda.fetch(freezePda);\r\n    return state;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport const getFreezePda = async (\r\n  candyMachine: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"freeze\"), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n  candyMachineAddress: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport interface CollectionData {\r\n  mint: anchor.web3.PublicKey;\r\n  candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n  mint: anchor.web3.PublicKey,\r\n  newAuthority: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"collection_authority\"),\r\n        newAuthority.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport type SetupState = {\r\n  mint: anchor.web3.Keypair;\r\n  userTokenAccount: anchor.web3.PublicKey;\r\n  transaction: string;\r\n};\r\n\r\nexport const createAccountsForMint = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey\r\n): Promise<SetupState> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1\r\n    ),\r\n  ];\r\n\r\n  return {\r\n    mint: mint,\r\n    userTokenAccount: userTokenAccountAddress,\r\n    transaction: (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions],\r\n        [signers],\r\n        SequenceType.StopOnFailure,\r\n        \"singleGossip\",\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        [],\r\n        []\r\n      )\r\n    ).txs[0].txid,\r\n  };\r\n};\r\n\r\ntype MintResult = {\r\n  mintTxId: string;\r\n  metadataKey: anchor.web3.PublicKey;\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n  setupState?: SetupState\r\n): Promise<MintResult | null> => {\r\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const instructions = [];\r\n  const signers: anchor.web3.Keypair[] = [];\r\n  console.log(\"SetupState: \", setupState);\r\n  if (!setupState) {\r\n    signers.push(mint);\r\n    instructions.push(\r\n      ...[\r\n        anchor.web3.SystemProgram.createAccount({\r\n          fromPubkey: payer,\r\n          newAccountPubkey: mint.publicKey,\r\n          space: MintLayout.span,\r\n          lamports:\r\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n              MintLayout.span\r\n            ),\r\n          programId: TOKEN_PROGRAM_ID,\r\n        }),\r\n        Token.createInitMintInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          0,\r\n          payer,\r\n          payer\r\n        ),\r\n        createAssociatedTokenAccountInstruction(\r\n          userTokenAccountAddress,\r\n          payer,\r\n          payer,\r\n          mint.publicKey\r\n        ),\r\n        Token.createMintToInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          userTokenAccountAddress,\r\n          payer,\r\n          [],\r\n          1\r\n        ),\r\n      ]\r\n    );\r\n  }\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: payer,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: payer,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress\r\n  );\r\n\r\n  const freezePda = (await getFreezePda(candyMachineAddress))[0];\r\n  console.log(freezePda.toString());\r\n\r\n  const freezePdaState = await getFreezePdaState(\r\n    candyMachine.program,\r\n    freezePda\r\n  );\r\n\r\n  console.log(\"Freeze state: \");\r\n  console.log(freezePdaState);\r\n\r\n  if (freezePdaState != null) {\r\n    remainingAccounts.push({\r\n      pubkey: freezePda,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: userTokenAccountAddress,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    });\r\n    if (candyMachine.state.tokenMint != null) {\r\n      const freezeAta = (\r\n        await getAtaForMint(candyMachine.state.tokenMint, freezePda)\r\n      )[0];\r\n      remainingAccounts.push({\r\n        pubkey: freezeAta,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    })\r\n  );\r\n\r\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n  const collectionPDAAccount =\r\n    await candyMachine.program.provider.connection.getAccountInfo(\r\n      collectionPDA\r\n    );\r\n\r\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n    try {\r\n      const collectionData =\r\n        (await candyMachine.program.account.collectionPda.fetch(\r\n          collectionPDA\r\n        )) as CollectionData;\r\n      console.log(collectionData);\r\n      const collectionMint = collectionData.mint;\r\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n        collectionMint,\r\n        collectionPDA\r\n      );\r\n      console.log(collectionMint);\r\n      if (collectionMint) {\r\n        const collectionMetadata = await getMetadata(collectionMint);\r\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\r\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\r\n        instructions.push(\r\n          await candyMachine.program.instruction.setCollectionDuringMint({\r\n            accounts: {\r\n              candyMachine: candyMachineAddress,\r\n              metadata: metadataAddress,\r\n              payer: payer,\r\n              collectionPda: collectionPDA,\r\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n              collectionMint,\r\n              collectionMetadata,\r\n              collectionMasterEdition,\r\n              authority: candyMachine.state.authority,\r\n              collectionAuthorityRecord,\r\n            },\r\n          })\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const instructionsMatrix = [instructions];\r\n  const signersMatrix = [signers];\r\n\r\n  try {\r\n    const txns = (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        instructionsMatrix,\r\n        signersMatrix,\r\n        SequenceType.StopOnFailure,\r\n        \"singleGossip\",\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        beforeTransactions,\r\n        afterTransactions\r\n      )\r\n    ).txs.map((t) => t.txid);\r\n    const mintTxn = txns[0];\r\n    return {\r\n      mintTxId: mintTxn,\r\n      metadataKey: metadataAddress,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n","/* eslint-disable */\r\nimport {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\r\n\r\nexport const DEFAULT_TIMEOUT = 60000;\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, \"max\");\r\n\r\n  const tx = await connection.getParsedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach((log) => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][]\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  const toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          \"single\"\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          \"single\"\r\n        );\r\n        ids = ids.concat(txs.map((t) => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      \"Died on \",\r\n      stopPoint,\r\n      \"retrying from instruction\",\r\n      instructions[stopPoint],\r\n      \"instructions length is\",\r\n      instructions.length\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = \"singleGossip\",\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  blockhash?: Blockhash,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = []\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!blockhash) {\r\n    blockhash = (await connection.getLatestBlockhash(commitment)).blockhash;\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    const transaction = new Transaction();\r\n    instructions.forEach((instruction) => transaction.add(instruction));\r\n    transaction.recentBlockhash = blockhash;\r\n    transaction.feePayer = wallet.publicKey;\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\r\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n    partiallySignedTransactions\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  console.log(\r\n    \"Signed txns length\",\r\n    signedTxns.length,\r\n    \"vs handed in length\",\r\n    instructionSet.length\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise.then(({ txid, slot }) =>\r\n          successCallback(txid, i)\r\n        );\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log(\"Failed at txn index:\", i);\r\n        console.log(\"Caught failure:\", e);\r\n\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          return {\r\n            number: i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[] | Transaction,\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = \"singleGossip\",\r\n  includesFeePayer: boolean = false,\r\n  blockhash?: Blockhash\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (!Array.isArray(instructions)) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach((instruction) => transaction.add(instruction));\r\n\r\n    transaction.recentBlockhash =\r\n      blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\r\n    if (includesFeePayer) {\r\n      transaction.feePayer = signers[0].publicKey;\r\n    } else {\r\n      transaction.feePayer = wallet.publicKey;\r\n    }\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  const options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = \"singleGossip\",\r\n  includesFeePayer: boolean = false,\r\n  blockhash?: Blockhash,\r\n  beforeSend?: () => void\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach((instruction) => transaction.add(instruction));\r\n  transaction.recentBlockhash =\r\n    blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\r\n  if (includesFeePayer) {\r\n    transaction.feePayer = signers[0].publicKey;\r\n  } else {\r\n    transaction.feePayer = wallet.publicKey;\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    }\r\n  );\r\n\r\n  console.log(\"Started awaiting confirmation for\", txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      \"recent\",\r\n      true\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error(\"Transaction failed: Custom instruction error\");\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error(\"Timeout Error caught\", err);\r\n    if (err.timeout) {\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, \"single\")\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith(\"Program log: \")) {\r\n            throw new Error(\r\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString(\"base64\");\r\n  const config: any = { encoding: \"base64\", commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\r\n  if (res.error) {\r\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    await connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n"],"sourceRoot":""}